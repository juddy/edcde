<!-- $XConsortium: Tttttk.sgm /main/6 1996/08/31 14:47:22 rws $ -->
<!-- (c) Copyright 1995 Digital Equipment Corporation. -->
<!-- (c) Copyright 1995 Hewlett-Packard Company. -->
<!-- (c) Copyright 1995 International Business Machines Corp. -->
<!-- (c) Copyright 1995 Sun Microsystems, Inc. -->
<!-- (c) Copyright 1995 Novell, Inc. -->
<!-- (c) Copyright 1995 FUJITSU LIMITED. -->
<!-- (c) Copyright 1995 Hitachi. -->

<![ %CDE.C.CDE; [<RefEntry Id="CDEMX.XCDI.MAN326.rsml.1">]]>
<![ %CDE.C.XO; [<RefEntry Id="XCDI.MAN326.rsml.1">]]>
<RefMeta>
<RefEntryTitle>Tt/tttk.h</RefEntryTitle>
<ManVolNum>file formats</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Filename>Tt/tttk.h</Filename></RefName>
<RefPurpose>ToolTalk definitions
</RefPurpose>
</RefNameDiv>
<!-- $XConsortium: Tttttk.sgm /main/6 1996/08/31 14:47:22 rws $-->
<!-- CDE Common Source Format, Version 1.0.0-->
<!-- (c) Copyright 1993, 1994, 1995 Hewlett-Packard Company-->
<!-- (c) Copyright 1993, 1994, 1995 International Business Machines Corp.-->
<!-- (c) Copyright 1993, 1994, 1995 Sun Microsystems, Inc.-->
<!-- (c) Copyright 1993, 1994, 1995 Novell, Inc.-->
<RefSynopsisDiv>
<Synopsis>#include &lt;Tt/tttk.h>
</Synopsis>
</RefSynopsisDiv>
<RefSect1>
<Title>DESCRIPTION</Title>
<Para>The
<Filename Role="Header">Tt/tttk.h</Filename> header defines the following enumeration data type,
with at least the following members:
</Para>
<VariableList>
<VarListEntry>
<Term><StructName Role="typedef">Tttk_op</StructName></Term>
<ListItem>
<Para><SystemItem Class="Constant">TTDT_CREATED</SystemItem>,
<SystemItem Class="Constant">TTDT_DELETED</SystemItem>,
<SystemItem Class="Constant">TTDT_DO_COMMAND</SystemItem>,
<SystemItem Class="Constant">TTDT_GET_ENVIRONMENT</SystemItem>,
<SystemItem Class="Constant">TTDT_GET_GEOMETRY</SystemItem>,
<SystemItem Class="Constant">TTDT_GET_ICONIFIED</SystemItem>,
<SystemItem Class="Constant">TTDT_GET_LOCALE</SystemItem>,
<SystemItem Class="Constant">TTDT_GET_MAPPED</SystemItem>,
<SystemItem Class="Constant">TTDT_GET_MODIFIED</SystemItem>,
<SystemItem Class="Constant">TTDT_GET_SITUATION</SystemItem>,
<SystemItem Class="Constant">TTDT_GET_STATUS</SystemItem>,
<SystemItem Class="Constant">TTDT_GET_SYSINFO</SystemItem>,
<SystemItem Class="Constant">TTDT_GET_XINFO</SystemItem>,
<SystemItem Class="Constant">TTDT_LOWER</SystemItem>,
<SystemItem Class="Constant">TTDT_MODIFIED</SystemItem>,
<SystemItem Class="Constant">TTDT_MOVED</SystemItem>,
<SystemItem Class="Constant">TTDT_OP_LAST</SystemItem>,
<SystemItem Class="Constant">TTDT_OP_NONE</SystemItem>,
<SystemItem Class="Constant">TTDT_PAUSE</SystemItem>,
<SystemItem Class="Constant">TTDT_QUIT</SystemItem>,
<SystemItem Class="Constant">TTDT_RAISE</SystemItem>,
<SystemItem Class="Constant">TTDT_RESUME</SystemItem>,
<SystemItem Class="Constant">TTDT_REVERT</SystemItem>,
<SystemItem Class="Constant">TTDT_REVERTED</SystemItem>,
<SystemItem Class="Constant">TTDT_SAVE</SystemItem>,
<SystemItem Class="Constant">TTDT_SAVED</SystemItem>,
<SystemItem Class="Constant">TTDT_SET_ENVIRONMENT</SystemItem>,
<SystemItem Class="Constant">TTDT_SET_GEOMETRY</SystemItem>,
<SystemItem Class="Constant">TTDT_SET_ICONIFIED</SystemItem>,
<SystemItem Class="Constant">TTDT_SET_LOCALE</SystemItem>,
<SystemItem Class="Constant">TTDT_SET_MAPPED</SystemItem>,
<SystemItem Class="Constant">TTDT_SET_SITUATION</SystemItem>,
<SystemItem Class="Constant">TTDT_SET_XINFO</SystemItem>,
<SystemItem Class="Constant">TTDT_SIGNAL</SystemItem>,
<SystemItem Class="Constant">TTDT_STARTED</SystemItem>,
<SystemItem Class="Constant">TTDT_STATUS</SystemItem>,
<SystemItem Class="Constant">TTDT_STOPPED</SystemItem>,
<SystemItem Class="Constant">TTME_ABSTRACT</SystemItem>,
<SystemItem Class="Constant">TTME_COMPOSE</SystemItem>,
<SystemItem Class="Constant">TTME_DEPOSIT</SystemItem>,
<SystemItem Class="Constant">TTME_DISPLAY</SystemItem>,
<SystemItem Class="Constant">TTME_EDIT</SystemItem>,
<![ %CDE.C.CDE; [<SystemItem Class="Constant">TTME_INSTANTIATE</SystemItem>,
]]><SystemItem Class="Constant">TTME_INTERPRET</SystemItem>,
<SystemItem Class="Constant">TTME_MAIL</SystemItem>,
<SystemItem Class="Constant">TTME_MAIL_COMPOSE</SystemItem>,
<SystemItem Class="Constant">TTME_MAIL_EDIT</SystemItem>,
<SystemItem Class="Constant">TTME_PRINT</SystemItem>,
<SystemItem Class="Constant">TTME_TRANSLATE</SystemItem></Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>The header declares the following global
string constants for some standard vtypes:
</Para>
<Synopsis>extern const char  *Tttk_boolean:
extern const char  *Tttk_file:
extern const char  *Tttk_height:
extern const char  *Tttk_integer:
extern const char  *Tttk_message_id:
extern const char  *Tttk_string:
extern const char  *Tttk_title:
extern const char  *Tttk_width:
extern const char  *Tttk_xoffset:
extern const char  *Tttk_yoffset:
</Synopsis>
<Para>The header declares the following as functions:
</Para>
<Synopsis>int ttdt_Get_Modified(Tt_message <Symbol Role="Variable">context</Symbol>,
        const char *<Symbol Role="Variable">pathname</Symbol>,
        Tt_scope <Emphasis>the_scope</Emphasis>,
        XtAppContext <Emphasis>app2run</Emphasis>,
        int <Emphasis>ms_timeout</Emphasis>);
</Synopsis>
<Synopsis>Tt_status ttdt_Revert(Tt_message <Symbol Role="Variable">context</Symbol>,
        const char *<Symbol Role="Variable">pathname</Symbol>,
        Tt_scope <Emphasis>the_scope</Emphasis>,
        XtAppContext <Emphasis>app2run</Emphasis>,
        int <Emphasis>ms_timeout</Emphasis>);
</Synopsis>
<Synopsis>Tt_status ttdt_Save(Tt_message <Symbol Role="Variable">context</Symbol>,
        const char *<Symbol Role="Variable">pathname</Symbol>,
        Tt_scope <Emphasis>the_scope</Emphasis>,
        XtAppContext <Emphasis>app2run</Emphasis>,
        int <Emphasis>ms_timeout</Emphasis>);
</Synopsis>
<Synopsis>Tt_status ttdt_close(const char *<Emphasis>procid</Emphasis>,
        const char *<Emphasis>new_procid</Emphasis>,
        int <Emphasis>sendStopped</Emphasis>);
</Synopsis>
<Synopsis>Tt_status ttdt_file_event(Tt_message <Symbol Role="Variable">context</Symbol>,
        Tttk_op <Symbol Role="Variable">event</Symbol>,
        Tt_pattern *<Emphasis>patterns</Emphasis>,
        int <Emphasis>send</Emphasis>);
</Synopsis>
<Synopsis>Tt_pattern *ttdt_file_join(const char *<Symbol Role="Variable">pathname</Symbol>,
        Tt_scope <Emphasis>the_scope</Emphasis>,
        int <Emphasis>join</Emphasis>,
        Ttdt_file_cb <Emphasis>cb</Emphasis>,
        void *<Emphasis>clientdata</Emphasis>);
</Synopsis>
<Synopsis>Tt_message ttdt_file_notice(Tt_message <Symbol Role="Variable">context</Symbol>,
        Tttk_op <Symbol Role="Variable">op</Symbol>,
        Tt_scope <Emphasis>scope</Emphasis>,
        const char *<Symbol Role="Variable">pathname</Symbol>,
        int <Emphasis>send_and_destroy</Emphasis>);
</Synopsis>
<Synopsis>Tt_status ttdt_file_quit(Tt_pattern *<Emphasis>patterns</Emphasis>,
        int <Symbol Role="Variable">quit</Symbol>);
</Synopsis>
<Synopsis>Tt_message ttdt_file_request(Tt_message <Symbol Role="Variable">context</Symbol>,
        Tttk_op <Symbol Role="Variable">op</Symbol>,
        Tt_scope <Emphasis>scope</Emphasis>,
        const char *<Symbol Role="Variable">pathname</Symbol>,
        Ttdt_file_cb <Emphasis>cb</Emphasis>,
        void *<Symbol Role="Variable">client_data</Symbol>,
        int <Emphasis>send_and_destroy</Emphasis>);
</Synopsis>
<Synopsis>Tt_pattern *ttdt_message_accept(Tt_message <Emphasis>contract</Emphasis>,
        Ttdt_contract_cb <Emphasis>cb</Emphasis>,
        Widget <Symbol Role="Variable">shell</Symbol>,
        void *<Emphasis>clientdata</Emphasis>,
        int <Emphasis>accept</Emphasis>,
        int <Emphasis>sendStatus</Emphasis>);
</Synopsis>
<Synopsis>char *ttdt_open(int *<Emphasis>ttfd</Emphasis>,
        const char *<Emphasis>toolname</Emphasis>,
        const char *<Emphasis>vendor</Emphasis>,
        const char *<Symbol Role="Variable">version</Symbol>,
        int <Emphasis>sendStarted</Emphasis>);
</Synopsis>
<Synopsis>Tt_status ttdt_sender_imprint_on(const char *<Emphasis>handler</Emphasis>,
        Tt_message <Emphasis>contract</Emphasis>,
        char **<Symbol Role="Variable">display</Symbol>,
        int *<Symbol Role="Variable">width</Symbol>,
        int *<Symbol Role="Variable">height</Symbol>,
        int *<Symbol Role="Variable">xoffset</Symbol>,
        int *<Symbol Role="Variable">yoffset</Symbol>,
        XtAppContext <Emphasis>app2run</Emphasis>,
        int <Emphasis>ms_timeout</Emphasis>);
</Synopsis>
<Synopsis>Tt_pattern *ttdt_session_join(const char *<Emphasis>sessid</Emphasis>,
        Ttdt_contract_cb <Emphasis>cb</Emphasis>,
        Widget <Symbol Role="Variable">shell</Symbol>,
        void *<Emphasis>clientdata</Emphasis>,
        int <Emphasis>join</Emphasis>);
</Synopsis>
<Synopsis>Tt_status ttdt_session_quit(const char *<Emphasis>sessid</Emphasis>,
        Tt_pattern *<Emphasis>sess_pats</Emphasis>,
        int <Symbol Role="Variable">quit</Symbol>);
</Synopsis>
<Synopsis>Tt_pattern *ttdt_subcontract_manage(Tt_message <Emphasis>subcontract</Emphasis>,
        Ttdt_contract_cb <Emphasis>cb</Emphasis>,
        Widget <Symbol Role="Variable">shell</Symbol>,
        void *<Emphasis>clientdata</Emphasis>);
</Synopsis>
<Synopsis>Tt_status ttmedia_Deposit(Tt_message <Emphasis>load_contract</Emphasis>,
        const char *<Emphasis>buffer_id</Emphasis>,
        const char *<Emphasis>media_type</Emphasis>,
        const unsigned char *<Emphasis>new_contents</Emphasis>,
        int <Emphasis>new_len</Emphasis>,
        const char *<Symbol Role="Variable">pathname</Symbol>,
        XtAppContext <Emphasis>app2run</Emphasis>,
        int <Emphasis>ms_timeout</Emphasis>);
</Synopsis>
<Synopsis>Tt_message ttmedia_load(Tt_message <Symbol Role="Variable">context</Symbol>,
        Ttmedia_load_msg_cb <Emphasis>cb</Emphasis>,
        void *<Emphasis>clientdata</Emphasis>,
        Tttk_op <Symbol Role="Variable">op</Symbol>,
        const char *<Emphasis>media_type</Emphasis>,
        const unsigned char *<Emphasis>contents</Emphasis>,
        int <Emphasis>len</Emphasis>,
        const char *<Symbol Role="Variable">file</Symbol>,
        const char *<Emphasis>docname</Emphasis>,
        int <Emphasis>send</Emphasis>);
</Synopsis>
<Synopsis>Tt_message ttmedia_load_reply(Tt_message <Emphasis>contract</Emphasis>,
        const unsigned char *<Emphasis>new_contents</Emphasis>,
        int <Emphasis>new_len</Emphasis>,
        int <Emphasis>reply_and_destroy</Emphasis>);
</Synopsis>
<Synopsis>Tt_status ttmedia_ptype_declare(const char *<Emphasis>ptype</Emphasis>,
        int <Emphasis>base_opnum</Emphasis>,
        Ttmedia_load_pat_cb <Emphasis>cb</Emphasis>,
        void *<Emphasis>clientdata</Emphasis>,
        int <Emphasis>declare</Emphasis>);
</Synopsis>
<Synopsis>void tttk_Xt_input_handler(XtPointer <Emphasis>procid</Emphasis>,
        int *<Symbol Role="Variable">source</Symbol>,
        XtInputId *<Emphasis>id</Emphasis>);
</Synopsis>
<Synopsis>Tt_status tttk_block_while(XtAppContext <Emphasis>app2run</Emphasis>,
        const int *<Emphasis>blocked</Emphasis>,
        int <Emphasis>ms_timeout</Emphasis>);
</Synopsis>
<Synopsis>Tt_status tttk_message_abandon(Tt_message <Emphasis>msg</Emphasis>);
</Synopsis>
<Synopsis>Tt_message tttk_message_create(Tt_message <Symbol Role="Variable">context</Symbol>,
        Tt_class <Emphasis>the_class</Emphasis>,
        Tt_scope <Emphasis>the_scope</Emphasis>,
        const char *<Emphasis>handler</Emphasis>,
        const char *<Symbol Role="Variable">op</Symbol>,
        Tt_message_callback <Symbol Role="Variable">callback</Symbol>);
</Synopsis>
<Synopsis>Tt_status tttk_message_destroy(Tt_message <Emphasis>msg</Emphasis>);
</Synopsis>
<Synopsis>Tt_status tttk_message_fail(Tt_message <Emphasis>msg</Emphasis>,
        Tt_status <Symbol Role="Variable">status</Symbol>,
        const char *<Emphasis>status_string</Emphasis>,
        int <Symbol Role="Variable">destroy</Symbol>);
</Synopsis>
<Synopsis>Tt_status tttk_message_reject(Tt_message <Emphasis>msg</Emphasis>,
        Tt_status <Symbol Role="Variable">status</Symbol>,
        const char *<Emphasis>status_string</Emphasis>,
        int <Symbol Role="Variable">destroy</Symbol>);
</Synopsis>
<Synopsis>char *tttk_op_string(Tttk_op <Emphasis>opcode</Emphasis>);
</Synopsis>
<Synopsis>Tttk_op tttk_string_op(const char *<Emphasis>opstring</Emphasis>);
</Synopsis>
</RefSect1>
</RefEntry>
<!--fickle 1.12 mancsf-to-docbook 1.2 08/07/95 23:18:47-->
