<!-- $XConsortium: Concepts.sgm /main/5 1996/12/18 01:07:23 cde-hit $ -->
<!-- (c) Copyright 1995 Digital Equipment Corporation. -->
<!-- (c) Copyright 1995 Hewlett-Packard Company. -->
<!-- (c) Copyright 1995 International Business Machines Corp. -->
<!-- (c) Copyright 1995 Sun Microsystems, Inc. -->
<!-- (c) Copyright 1995 Novell, Inc. -->
<!-- (c) Copyright 1995 FUJITSU LIMITED. -->
<!-- (c) Copyright 1995 Hitachi. -->
<!--	Help volume: App Builder 
	File name:   concepts  -->
<Chapter Id="ABConcepts">
<Title>アプリケーション・ビルダの概念</Title>
<ItemizedList Mark="&bull;" Role="tight">
<ListItem Id="H.CNCP.item.1">
<Para> <XRef Linkend="ABProcess"> 
</Para>
</ListItem>
<ListItem Id="H.CNCP.item.2">
<Para> <XRef Linkend="ABProjectsModules"> 
</Para>
</ListItem>
<ListItem Id="H.CNCP.item.3">
<Para> <XRef Linkend="ABMessageExample"> 
</Para>
</ListItem>
<ListItem Id="H.CNCP.item.4">
<Para> <XRef Linkend="ABAboutAttachments"> 
</Para>
</ListItem>
</ItemizedList>
<Sect1 Id="ABProcess">
<Title> アプリケーション・ビルダのプロセスの概説</Title>
<IndexTerm>
<Primary>アプリケーション・ビルダのプロセス</Primary>
</IndexTerm>
<IndexTerm>
<Primary>プロセス, インタフェースの作成</Primary>
</IndexTerm>
<Para>アプリケーション・ビルダのユーザ・インタフェースを作成するプロセスを、以下に説明します。
</Para>
<OrderedList>
<ListItem Id="H.CNCP.item.5">
<Para> インタフェースの設計。ピクチャを描きます。
 </Para>
</ListItem>
<ListItem Id="H.CNCP.item.6">
<Para> アプリケーション・ビルダのインタフェースの "スペック" を実行します。
インタフェースの設計の各部品として、アプリケーション・ビルダのどのオブジェクトを使用するかを決定します。
 </Para>
</ListItem>
<ListItem Id="H.CNCP.item.7">
<Para> アプリケーション・ビルダを起動してください。
 </Para>
</ListItem>
<ListItem Id="H.CNCP.item.8">
<Para> メイン・ウィンドウを、デスクトップ上にドラッグ＆ドロップしてください。
これは、仕上げるアプリケーションのすべての機能の開始点になります。
 </Para>
</ListItem>
<ListItem Id="H.CNCP.item.9">
<Para> コントロール区画を、メイン・ウィンドウ上にドラッグ＆ドロップしてください。
コントロールは、コントロール区画上にドロップされます。
 </Para>
</ListItem>
<ListItem Id="H.CNCP.item.10">
<Para> 適切なコントロールを、コントロール区画上にドラッグ＆ドロップしてください。
アプリケーション・ビルダのグループ、配列、およびアタッチメント・ツールを使用して、コントロールを適切に配置してください。
 </Para>
</ListItem>
<ListItem Id="H.CNCP.item.11">
<Para> 他のメイン・ウィンドウおよびカスタム・ダイアログを、デスクトップ上にドラッグ＆ドロップして、インタフェースの他の部分を作成してください。
 </Para>
</ListItem>
<ListItem Id="H.CNCP.item.12">
<Para> インタフェース内のオブジェクト間のプログラム接続を作成してください。
テスト・モードで、接続をテストしてください。
 </Para>
</ListItem>
<ListItem Id="H.CNCP.item.13">
<Para> インタフェースを改善して、正常になるまでテストを継続してください。
 </Para>
</ListItem>
<ListItem Id="H.CNCP.item.14">
<Para> アプリケーション・ビルダのコード・ジェネレータを実行して、コードを生成してください。
ユーザ・コードを追加して、アプリケーションの機能を完成させてください。
 </Para>
</ListItem>
<ListItem Id="H.CNCP.item.15">
<Para> アプリケーションが完成するまで、コンパイル、実行、テストを反復してください。
</Para>
</ListItem>
</OrderedList>
</Sect1>
<Sect1 Id="ABProjectsModules">
<Title> アプリケーション・ビルダのプロジェクトとモジュール</Title>
<IndexTerm>
<Primary> プロジェクト </Primary>
</IndexTerm>
<IndexTerm>
<Primary> モジュール </Primary>
</IndexTerm>
<ItemizedList Mark="&bull;" Role="tight">
<ListItem Id="H.CNCP.item.16">
<Para> <XRef Linkend="ABProjectDef"> 
</Para>
</ListItem>
<ListItem Id="H.CNCP.item.17">
<Para> <XRef Linkend="ABModuleDef"> 
</Para>
</ListItem>
</ItemizedList>
<Sect2 Id="ABProjectDef">
<Title> プロジェクトとは何か?</Title>
<Para>アプリケーション・ビルダを使用して、グラフィカル・ユーザ・インタフェースを作成する場合は、1 個以上のモジュールで構成される<Emphasis>プロジェクト</Emphasis>上で作業します。
それ自体によって構築されたアプリケーション・ビルダは、30 個以上のモジュールで構成される単一のプロジェクトです。</Para>
<Para>プロジェクト・ファイルは、[ファイル] メニューで [新規プロジェクト] を選択した時に、あるいはアプリケーション・ビルダの新規セッションで、ウィンドウをデスクトップ上にドラッグ＆ドロップした時に、開始されます。</Para>
<Para>プロジェクト・ファイルは、[ファイル] メニューで [プロジェクトを保存] を選択した時に、あるいは [プロジェクト・オーガナイザ] の [プロジェクト] メニューで [保存] を選択した時に、保存されます。
プロジェクト・ファイルには、<ComputerOutput>.bip</ComputerOutput> (builder interface project の略) という接尾辞が付きます。</Para>
<Procedure>
<Title> 関連項目</Title>
<Step>
<ItemizedList Mark="&bull;" Role="tight">
<ListItem Id="H.CNCP.item.18">
<Para> <XRef Linkend="ABModuleDef"></Para>
</ListItem>
</ItemizedList>
</Step>
</Procedure>
</Sect2>
<Sect2 Id="ABModuleDef">
<Title> モジュールとは何か?</Title>
<Para>モジュールは、プロジェクトの論理ユニットです。アプリケーション・ビルダのそれぞれのウィンドウおよびダイアログは、アプリケーション・ビルダのプロジェクトのモジュールです。</Para>
<Para>プロジェクト内のすべてのモジュール・ファイルは、プロジェクトを保存する時に保存されます。[プロジェクト・オーガナイザ] の [モジュール] メニューで、[保存] を選択すると、特定のモジュールを明示的に保存できます。</Para>
<Para>保存したモジュール・ファイルには、<ComputerOutput>.bil</ComputerOutput> (builder interface language の略) という接尾辞が付きます。</Para>
<Procedure>
<Title> 関連項目</Title>
<Step>
<ItemizedList Mark="&bull;" Role="tight">
<ListItem Id="H.CNCP.item.19">
<Para> <XRef Linkend="ABProjectDef"></Para>
</ListItem>
</ItemizedList>
</Step>
</Procedure>
</Sect2>
</Sect1>
<Sect1 Id="ABMessageExample">
<Title> 例: メッセージ・コードの書き方</Title>
<Para><XRef Linkend="ABCreateMessage"> で説明したようにメッセージを作成したら、いつ、どのようにそれを表示するかを決めなければなりません。
メッセージは通常、ロジックのある部分の実行後に表示されます。
たとえば、名前を受け入れるように設計されたテキスト・フィールドにユーザが数字を入力した場合に、数字は有効ではないことをユーザに通知するエラー・メッセージを固定表示したいことがあります。</Para>
<Para>Motif のメッセージ・ボックスは、モード付きかモードなし (ブロック化かブロック化なしに相当) の 2 通りの方法のどちらかで表示できます。
アプリケーション・ビルダのコード・ジェネレータ (<ComputerOutput>dtcodegen</ComputerOutput>) には、表示の 2 つのモードに対応する 2 個のルーチンがあります。
それらは、<ComputerOutput>dtb_utils.c </ComputerOutput> にあり、以下の名前です。</Para>
<ItemizedList Mark="&bull;">
<ListItem Id="H.CNCP.item.20">
<Para> <ComputerOutput>dtb_show_modal_message()</ComputerOutput>
</Para>
</ListItem>
<ListItem Id="H.CNCP.item.21">
<Para> <ComputerOutput>dtb_show_message()</ComputerOutput>
</Para>
</ListItem>
</ItemizedList>
<Para>特定のメッセージをモード付きで表示する場合は、<ComputerOutput>dtb_show_ modal_message()</ComputerOutput> を使用してください。
特定のメッセージをモードなしで表示する場合は、<ComputerOutput>dtb_show_message()</ComputerOutput> を使用してください。
</Para>
<Procedure>
<Title> 関連項目</Title>
<Step>
<ItemizedList Mark="&bull;" Role="tight">
<ListItem Id="H.CNCP.item.22">
<Para> <XRef Linkend="ABCodingModal"> 
</Para>
</ListItem>
<ListItem Id="H.CNCP.item.23">
<Para> <XRef Linkend="ABCodingNonModal"> 
</Para>
</ListItem>
</ItemizedList>
</Step>
</Procedure>
<Sect2 Id="ABCodingModal">
<Title> モード付きメッセージのコーディング</Title>
<Para>上記で説明したように、メッセージをモード付きで表示する場合は、
<ComputerOutput>dtb_show_modal_message()</ComputerOutput> を使用してください。
このルーチンは、ユーザがメッセージ・ボックス・ボタンを押したことを示す値を返しま
す。
値は、<ComputerOutput>enum</ComputerOutput> で、<ComputerOutput>dtb_utils.h</ComputerOutput>の中で定義されます。</Para>
<LiteralLayout>/*
	 * Returns answer value for modal MessageBox
	 */
	typedef enum {
	    DTB_ANSWER_NONE,
	    DTB_ANSWER_ACTION1,
	    DTB_ANSWER_ACTION2,
	    DTB_ANSWER_ACTION3,
	    DTB_ANSWER_CANCEL,
	    DTB_ANSWER_HELP
	} DTB_MODAL_ANSWER;
</LiteralLayout>
<Para>その後、たとえばスイッチ文を介して戻り値を試験し、コードの該当な部分を実行できます。</Para>
<Para>ここでは、メッセージをモード付きで表示する例を示します。
<ComputerOutput>foo</ComputerOutput> という簡単なアプリケーションを作成するとします。
プロジェクト名は <ComputerOutput>foo.bip</ComputerOutput> で、1 個のモジュール<ComputerOutput>foo.bil</ComputerOutput> で構成されています。
モジュール<ComputerOutput>foo.bil</ComputerOutput> には、メイン・ウィンドウと、コントロール区画と、 2 個のテキスト・フィールドがあります。
1 個はユーザが人の名を入力するためのもので、もう 1 個は姓を入力するためのものです。
ユーザが数字を入力した場合は、エラー・メッセージを固定表示して、数字は受け入れられないことをユーザに知らせ、1 組のオプションを表示します。
ユーザは、最初に戻ること、つまり入力したテキストを消去することができます。
あるいは、継続すること、つまり入力したテキストはそのまま残して、テキストの変更方法はユーザの裁量に任せることができます。</Para>
<Para>呼び出し関数接続は、両方のテキスト・フィールドに対して実行され、ユーザが何かを入力するたびに呼び出されます。
最初のテキスト・フィールドに対する関数は、入力された文字が数字であるかどうかをチェックします。
数字の場合は、エラー・メッセージをモード付きで固定表示します。</Para>
<LiteralLayout>void 
verify_first_nameCB(
    Widget widget,
    XtPointer clientData,
    XtPointer callData
)
{
    /*** DTB_USER_CODE_START vvv Add C variables and code below vvv ***/ 
    char                *text = (char *)NULL;
    int                 textlen = 0;
    DTB_MODAL_ANSWER    answer = DTB_ANSWER_NONE;
    DtbFooMainwindowInfo instance = (DtbFooMainwindowInfo) clientData;
 
    /*** DTB_USER_CODE_END   ^^^ Add C variables and code above ^^^ ***/

    /*** DTB_USER_CODE_START vvv Add C code below vvv ***/
  
    text = XmTextFieldGetString(widget); 
    if ((text != NULL) && (*text != NULL))
    {
        textlen = strlen(text);
        if (isdigit(text[textlen-1]))
        {
            dtb_foo_message_initialize(&amp;dtb_foo_message);
            answer = dtb_show_modal_message(instance->textfield,
                        &amp;dtb_foo_message, NULL, NULL, NULL);
            switch (answer)
            {
                case DTB_ANSWER_ACTION1:        /* Start Over */
                    XmTextFieldSetString(widget, "");
                    break;
 
                case DTB_ANSWER_ACTION2:	/* Continue */
                    break;
            }
        }
    }
 
    /*** DTB_USER_CODE_END   ^^^ Add C code above ^^^ ***/
}
</LiteralLayout>
<Procedure>
<Title> 関連項目</Title>
<Step>
<ItemizedList Mark="&bull;" Role="tight">
<ListItem Id="H.CNCP.item.24">
<Para> <XRef Linkend="ABCodingNonModal"> 
</Para>
</ListItem>
</ItemizedList>
</Step>
</Procedure>
</Sect2>
<Sect2 Id="ABCodingNonModal">
<Title> モードなしのメッセージのコーディング</Title>
<Para>モードなしのメッセージを固定表示する場合は、
<ComputerOutput>dtb_show_message()</ComputerOutput> を使用しなければなりません。
メッセージ・ボックス・ボタンに対するコールバックは、<XRef Linkend="ABConnectMessage">で説明するように、必ず [接続エディタ] を介して指定してください。
メッセージ・ボックス用に指定されるボタンは、[接続エディタ] のメッセージ・オブジェクトの [いつ] 項目として表示されます。</Para>
<Para>上記と同じ例を使用して、ユーザが数字を入力した時に、姓のテキスト・フィールドが、エラー・メッセージをモードなしで表示するようにします。
前述のように、まず、1 組の呼び出し関数接続を、メッセージ・ボックスの [やり直し] と [継続] というラベルが付いたボタンに対して実行する必要があります。
コードを生成する時に、これらのルーチンが正しいことを実行するようにコードを追加してください。
この場合、やり直しルーチンはテキスト・フィールドを消去し、継続ルーチンは何もしません。</Para>
<LiteralLayout>void 
verify_last_nameCB(
    Widget widget,
    XtPointer clientData,
    XtPointer callData
)
{
    /*** DTB_USER_CODE_START vvv Add C variables and code below vvv ***/ 
    char                *text = (char *)NULL;
    int                 textlen = 0;
    DtbFooMainwindowInfo instance = (DtbFooMainwindowInfo) clientData;
 
    /*** DTB_USER_CODE_END   ^^^ Add C variables and code above ^^^ ***/

    /*** DTB_USER_CODE_START vvv Add C code below vvv ***/
                          
    text = XmTextFieldGetString(widget); 
    if ((text != NULL) && (*text != NULL))
    {
        textlen = strlen(text);
        if (isdigit(text[textlen-1]))
        {
            dtb_foo_message_initialize(&amp;dtb_foo_message);
            dtb_show_message(instance->textfield,
                        &amp;dtb_foo_message, NULL, NULL);
        }
    }
 
    /*** DTB_USER_CODE_END   ^^^ Add C code above ^^^ ***/
}


void
start_overCB(
    Widget widget,
    XtPointer clientData,
    XtPointer callData
)
{
    /*** DTB_USER_CODE_START vvv Add C variables and code below vvv ***/
 
    DtbFooMainwindowInfo instance = (DtbFooMainwindowInfo) clientData;
 
    /*** DTB_USER_CODE_END   ^^^ Add C variables and code above ^^^ ***/

    /*** DTB_USER_CODE_START vvv Add C code below vvv ***/               
 
    XmTextFieldSetString(dtb_foo_mainwindow.textfield2, "");

    /*** DTB_USER_CODE_END   ^^^ Add C code above ^^^ ***/
}
 

void
continueCB(
    Widget widget,
    XtPointer clientData,
    XtPointer callData
)
{
    /*** DTB_USER_CODE_START vvv Add C variables and code below vvv ***/
    /*** DTB_USER_CODE_END   ^^^ Add C variables and code above ^^^ ***/

    /*** DTB_USER_CODE_START vvv Add C code below vvv ***/               
    /*** DTB_USER_CODE_END   ^^^ Add C code above ^^^ ***/
}
</LiteralLayout>
<Para>上記の 2 つのルーチン <ComputerOutput>start_overCB()</ComputerOutput> と <ComputerOutput>continueCB()</ComputerOutput> は、2 個のボタンに対するコールバックとして、<ComputerOutput>dtb_show_message()</ComputerOutput> に対する呼び出しを介して追加されます。
ここに、<ComputerOutput>dtb_utils.c</ComputerOutput> からコールバックを追加するコードの部分を示します。</Para>
<LiteralLayout>/* Add Callbacks if necessary */
    if (mbr->action1_callback != (XtCallbackProc) NULL)
        XtAddCallback(msg_dlg, XmNokCallback, mbr->action1_callback, NULL);
    if (mbr->cancel_callback != (XtCallbackProc) NULL)
        XtAddCallback(msg_dlg, XmNcancelCallback, mbr->cancel_callback,
NULL);
    if (mbr->action2_callback != (XtCallbackProc) NULL)
    { 
        action_btn = dtb_MessageBoxGetActionButton(msg_dlg, DTB_ACTION2_BUTTON);
        if (action_btn != NULL)
            XtAddCallback(action_btn, XmNactivateCallback,
                          mbr->action2_callback, NULL);
    }  
    if (mbr->action3_callback != (XtCallbackProc) NULL)
    {
        action_btn = dtb_MessageBoxGetActionButton(msg_dlg, DTB_ACTION3_BUTTON);        if (action_btn != NULL)
            XtAddCallback(action_btn, XmNactivateCallback,
                          mbr->action3_callback, NULL);
    }
</LiteralLayout>
<Para><ComputerOutput>mbr</ComputerOutput> ストラクチャは、メッセージに必要なすべての情報を含んでいます。
メッセージ・オブジェクトが <ComputerOutput>dtb_&lt;modulename>_&lt;messagename>_initialize()</ComputerOutput> ルーチンを介して作成されると、[メッセージ・エディタ] で指定された値がストラクチャに入ります。
この例では、<ComputerOutput>dtb_foo_message_initialize()</ComputerOutput>です。</Para>
<Procedure>
<Title> 関連項目</Title>
<Step>
<ItemizedList Mark="&bull;" Role="tight">
<ListItem Id="H.CNCP.item.25">
<Para> <XRef Linkend="ABCodingModal"> 
</Para>
</ListItem>
</ItemizedList>
</Step>
</Procedure>
</Sect2>
</Sect1>
<Sect1 Id="ABAboutAttachments">
<Title> アタッチメントについて</Title>
<Para>アタッチメントおよびアタッチメントに基づくグループは、インタフェース内のオブジェクトの動的配置動作を確立します。
動的配置動作は、サイズ変更動作中にオブジェクトが一貫した関係を維持することを保証します。
アタッチメントは、国際化アプリケーションが、多くのロケールで良好に動作できるようにします。
デフォルトでは、すべての子オブジェクトは、その上端と左端が、親オブジェクトの上端と左端に接続されます。
したがって、メイン・ウィンドウ上にドロップされたコントロール区画は、その左端と上端がメイン・ウィンドウの左端と上端に接続されます。
同様に、コントロール区画にドロップされたボタンは、コントロール区画に接続されます。</Para>
<Para>親オブジェクトのサイズが、上方向または左方向に変更される場合、子オブジェクトは、上端と左端の距離を維持して親と共に移動します。</Para>
<Para>区画オブジェクトが、親の上または左の端にドロップされる場合は、その端に、ゼロ (0) オフセットで接続されます。
親の左と上の端から、右と下に一定の距離だけ離してドロップされた場合は、正のオフセットを持ちます。</Para>
<Para>区画オブジェクトのサイズが、右端および下端から変更される場合、それに従って親オブジェクトも伸縮して、親の右端および下端に接続されます。</Para>
<Procedure>
<Title> アタッチメントの例: カスタム・ダイアログ</Title>
<Step>
<Para>アタッチメントの例として、アプリケーション・ビルダのカスタム・ダイアログ・オブジェクトを参照してください。
カスタム・ダイアログの下部にあるボタンは、それぞれが格納するダイアログ・パネルの上端と左右の端に接続されています。
これらは、パネルの上端から 5 ピクセルと、パネルの左端からのパーセントに応じて変わるように接続されています。
(ボタン 1 の左端は 10% で右端は 30%、ボタン 2 は 40% と 60%、ボタン 3 は 70% と 90%)</Para>
<Para>ボタン 1 の左端は常にパネルの端から 10% で、右端は常にパネルの端から 30% です。
したがって、ボタン 1 は常にパネルの幅全体の 20% 分の幅です。
ボタン 2 の端は、パネルの左端から 40% と 60% です。
ボタン 3 の端は、パネルの左端から 70% と 90% です。
この 3 個のボタンはパネルの伸縮に応じて伸縮し、相互の距離は常にパネルの幅全体の 10% です。</Para>
<!-- EOF: Concepts  -->
</Step>
</Procedure>
</Sect1>
</Chapter>
<!--fickle 1.15 help-to-docbook 1.4 01/17/96 17:37:35-->
