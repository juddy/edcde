# %%  (c) Copyright 1993, 1994 Hewlett-Packard Company			
# %%  (c) Copyright 1993, 1994 International Business Machines Corp.	
# %%  (c) Copyright 1993, 1994 Sun Microsystems, Inc.			
# %%  (c) Copyright 1993, 1994 Novell, Inc. 				
# %%  $XConsortium: Makefile.shipped /main/3 1995/10/23 09:44:25 rswiston $ 			 				
# Makefile generated by imake - do not edit!
# $XConsortium: Makefile.shipped /main/3 1995/10/23 09:44:25 rswiston $
#
# The cpp used on this machine replaces all newlines and multiple tabs and
# spaces in a macro expansion with a single space.  Imake tries to compensate
# for this, but is not always successful.
#

ARCH = $(TARGET_ARCH:-%=%)
OS_VERSION:sh = uname -r | sed 's/\..*//'

OS5x_5 = OS5x
OS5x = $(OS5x_$(OS_VERSION))

OBJ_FORMAT_4 = sun
OBJ_FORMAT_5 = elf
OBJ_FORMAT = $(OBJ_FORMAT_$(OS_VERSION))

PICCOMPILE.cc = $(CCC) $(CCFLAGS) -pic $(CPPFLAGS) $($(OS5x)TARGET_ARCH) -c

LINKSO_5 = ld -G -z text -h $(LD_LIB_NAME) $(LDFLAGS)
LINKSO_4 = ld -assert pure-text $(LDFLAGS)
LINKSO = $(LINKSO_$(OS_VERSION))

RANLIB_5 = true
RANLIB_4 = ranlib
RANLIB = $(RANLIB_$(OS_VERSION))

INDENT = indent -st -bap

CCC += $(CCC_OPTIONS)

SABER_CPPFLAGS = -I/usr/dist/local/sun4/lang/SC1.0/include/CC

CoEd_SOURCES.cc = \
	CoEd.cc \
	CoEdFile.cc \
	CoEdSiteID.cc \
	CoEdTextChange.cc \
	CoEdTextVersion.cc \
	CoEdChangeHistory.cc \
	CoEdChangeQueue.cc \
	SiteChange.cc

CoEd_HEADERS = \
	CoEd.h \
	CoEdChangeHistory.h \
	CoEdChangeQueue.h \
	CoEdFile.h \
	CoEdGlobals.h \
	CoEdSiteID.h \
	CoEdTextChange.h \
	CoEdTextVersion.h \
	SiteChange.h

CoEd_CPPFLAGS = -I$(OPENWINHOME)/include
CoEd_MAJOR_VERSION = 1
CoEd_MINOR_VERSION = 1

CoEdX_5 = .$(CoEd_MAJOR_VERSION)
CoEdX_4 = .$(CoEd_MAJOR_VERSION).$(CoEd_MINOR_VERSION)
CoEdX = $(CoEdX_$(OS_VERSION))

debug:: g.so

optimized:: O

CoEd_SOURCES.cc~ = $(CoEd_SOURCES.cc:%.cc=%.cc~)
CoEd_HEADERS~ = $(CoEd_HEADERS:%.h=%.h~)

CoEd_c_SOURCES.cc = $(CoEd_SOURCES.cc:%.cc=c/%.c)
CoEd_i_SOURCES.cc = $(CoEd_SOURCES.cc:%.cc=i/%.cc)

CoEd_OBJECTS_O = $(CoEd_SOURCES.cc:%.cc=$(OBJ_FORMAT)_O/%.o)
CoEd_OBJECTS_g = $(CoEd_SOURCES.cc:%.cc=$(OBJ_FORMAT)_g/%.o)

CoEd_PIC_OBJECTS_O = \
$(CoEd_SOURCES.cc:%.cc=$(OBJ_FORMAT)_pic_O/%.o)
CoEd_PIC_OBJECTS_g = \
$(CoEd_SOURCES.cc:%.cc=$(OBJ_FORMAT)_pic_g/%.o)

CoEd_i_PIC_OBJECTS_g = \
$(CoEd_SOURCES.cc:%.cc=i_$(OBJ_FORMAT)_pic_g/%.o)

CoEd_SOURCES.i = $(CoEd_SOURCES.cc:%.cc=%.i) \
	 $(CoEd_i_SOURCES.cc)

$(CoEd_OBJECTS_O) $(CoEd_OBJECTS_g) \
$(CoEd_PIC_OBJECTS_O) $(CoEd_PIC_OBJECTS_g) \
$(CoEd_i_PIC_OBJECTS_g) \
$(CoEd_SOURCES.cc:%.cc=%.i) $(CoEd_SOURCES.cc:%.cc=%.c) \
$(CoEd_SOURCES.cc:%.cc=%.s) $(CoEd_SOURCES.cc:%.cc=%.files) \
$(CoEd_c_SOURCES.cc) libCoEd_saber++ \
libCoEd_i_saber++ $(CoEd_SOURCES.cc:%.cc=%.saber++) \
	 := CPPFLAGS += $(CoEd_CPPFLAGS)

$(CoEd_SOURCES.cc:%.cc=%.saber++) \
	 := CPPFLAGS += $(SABER_CPPFLAGS)

$(CoEd_OBJECTS_O) $(CoEd_PIC_OBJECTS_O) := CCFLAGS += -O
$(CoEd_OBJECTS_g) $(CoEd_PIC_OBJECTS_g) \
$(CoEd_i_PIC_OBJECTS_g) \
	 := CCFLAGS += -g

$(OBJ_FORMAT)_pic_O/libCoEd.so$(CoEdX) \
$(OBJ_FORMAT)_pic_g/libCoEd.so$(CoEdX) \
i_$(OBJ_FORMAT)_pic_g/libCoEd.so$(CoEdX) := \
	LD_LIB_NAME = libCoEd.so$(CoEdX)

$(OBJ_FORMAT)_pic_O/libCoEd.so$(CoEdX): \
	$(CoEd_PIC_OBJECTS_O)
	$(LINKSO) -o $@ $(CoEd_PIC_OBJECTS_O)

$(OBJ_FORMAT)_pic_g/libCoEd.so$(CoEdX): \
	$(CoEd_PIC_OBJECTS_g)
	$(LINKSO) -o $@ $(CoEd_PIC_OBJECTS_g)

i_$(OBJ_FORMAT)_pic_g/libCoEd.so$(CoEdX): \
	$(CoEd_i_PIC_OBJECTS_g)
	$(LINKSO) -o $@ $(CoEd_i_PIC_OBJECTS_g)

$(OBJ_FORMAT)_O/libCoEd.a: $(CoEd_OBJECTS_O)
	$(RM) $@; $(AR) $(ARFLAGS) $@ $(CoEd_OBJECTS_O); \
	$(RANLIB) $@

$(OBJ_FORMAT)_g/libCoEd.a: $(CoEd_OBJECTS_g)
	$(RM) $@; $(AR) $(ARFLAGS) $@ $(CoEd_OBJECTS_g); \
	$(RANLIB) $@

libCoEd.tar: Makefile $(CoEd_SOURCES.cc) $(CoEd_HEADERS)
	tar cf $@ Makefile $(CoEd_SOURCES.cc) $(CoEd_HEADERS)

libCoEd_saber++: $(CoEd_SOURCES.cc)
	#load $(SABER_CPPFLAGS) $(CPPFLAGS) $(CoEd_SOURCES.cc)

libCoEd_i_saber++: $(CoEd_i_SOURCES.cc)
	#load $(SABER_CPPFLAGS) $(CPPFLAGS) $(CoEd_i_SOURCES.cc)

libCoEd_saber: $(CoEd_c_SOURCES.cc)
	#load $(CPPFLAGS) $(CoEd_c_SOURCES.cc)

all:: $(OBJ_FORMAT)_pic_O/libCoEd.so$(CoEdX) \
	$(OBJ_FORMAT)_pic_g/libCoEd.so$(CoEdX) \
	$(OBJ_FORMAT)_O/libCoEd.a \
	$(OBJ_FORMAT)_g/libCoEd.a
All:: i_$(OBJ_FORMAT)_pic_g/libCoEd.so$(CoEdX)
g.so:: $(OBJ_FORMAT)_pic_g/libCoEd.so$(CoEdX)
O.a:: $(OBJ_FORMAT)_O/libCoEd.a
g.a:: $(OBJ_FORMAT)_g/libCoEd.a
ig:: i_$(OBJ_FORMAT)_pic_g/libCoEd.so$(CoEdX)
O:: $(OBJ_FORMAT)_pic_O/libCoEd.so$(CoEdX)

clean~::
	$(RM) $(CoEd_SOURCES.cc~) $(CoEd_HEADERS~)

clean::
	$(RM) $(OBJ_FORMAT)_pic_O/libCoEd.so$(CoEdX) \
	 $(OBJ_FORMAT)_pic_g/libCoEd.so$(CoEdX) \
	 $(OBJ_FORMAT)_O/libCoEd.a \
	 $(OBJ_FORMAT)_g/libCoEd.a \
	 i_$(OBJ_FORMAT)_pic_g/libCoEd.so$(CoEdX) \
	 libCoEd.tar

clean.o.O::
	$(RM) $(CoEd_OBJECTS_O) $(CoEd_PIC_OBJECTS_O)

clean.o.g::
	$(RM) $(CoEd_OBJECTS_g) $(CoEd_PIC_OBJECTS_g)

clean.o.pic::
	$(RM) $(CoEd_PIC_OBJECTS_O) $(CoEd_PIC_OBJECTS_g)

clean.o.a::
	$(RM) $(CoEd_OBJECTS_O) $(CoEd_OBJECTS_g)

clean.i::
	$(RM) $(CoEd_SOURCES.i) \
	$(CoEd_SOURCES.cc:%.cc=%.c) \
	$(CoEd_SOURCES.cc:%.cc=%.c++) \
	$(CoEd_SOURCES.cc:%.cc=%.s) \
	$(CoEd_SOURCES.cc:%.cc=%.s++) \
	$(CoEd_SOURCES.cc:%.cc=%.files)

clean.i.o::
	$(RM) $(CoEd_i_PIC_OBJECTS_g)
clean.c::
	$(RM) $(CoEd_c_SOURCES.cc)

$(OBJ_FORMAT)_O/.dir		\
$(OBJ_FORMAT)_g/.dir		\
$(OBJ_FORMAT)_pic_O/.dir	\
$(OBJ_FORMAT)_pic_g/.dir	\
i_$(OBJ_FORMAT)_g/.dir		\
i_$(OBJ_FORMAT)_pic_g/.dir	\
m_$(OBJ_FORMAT)_O/.dir		\
m_$(OBJ_FORMAT)_g/.dir		\
c/.dir				\
c_$(OBJ_FORMAT)_O/.dir		\
c_$(OBJ_FORMAT)_pic_O/.dir:
	if [ ! -d $@ ]; then mkdir -p $@; fi

$(OBJ_FORMAT)_O/%.o: %.cc $(OBJ_FORMAT)_O/.dir
	$(COMPILE.cc) $(OUTPUT_OPTION) $< -o $@
$(OBJ_FORMAT)_g/%.o: %.cc $(OBJ_FORMAT)_g/.dir
	$(COMPILE.cc) $(OUTPUT_OPTION) $< -o $@
$(OBJ_FORMAT)_pic_O/%.o: %.cc $(OBJ_FORMAT)_pic_O/.dir
	$(PICCOMPILE.cc) $(OUTPUT_OPTION) $< -o $@
$(OBJ_FORMAT)_pic_g/%.o: %.cc $(OBJ_FORMAT)_pic_g/.dir
	$(PICCOMPILE.cc) $(OUTPUT_OPTION) $< -o $@
m_$(OBJ_FORMAT)_O/%.o: %.cc m_$(OBJ_FORMAT)_O/.dir
	$(COMPILE.cc) $(OUTPUT_OPTION) $< -o $@
m_$(OBJ_FORMAT)_g/%.o: %.cc m_$(OBJ_FORMAT)_g/.dir
	$(COMPILE.cc) $(OUTPUT_OPTION) $< -o $@

i/%.cc: i %.cc
	$(CCC) -E -Qoption acpp -P $(CPPFLAGS) $*.cc | \
		sed -e '/^[ 	]*\/\//D' | \
		$(INDENT) | sed -e 's/: :/::/' -e '/^#/d' > $@
i_$(OBJ_FORMAT)_g/%.o: i/%.cc i_$(OBJ_FORMAT)_g
	$(COMPILE.cc) $(OUTPUT_OPTION) $< -o $@
i_$(OBJ_FORMAT)_pic_g/%.o: i/%.cc i_$(OBJ_FORMAT)_pic_g
	$(PICCOMPILE.cc) $(OUTPUT_OPTION) $< -o $@

c/%.c: c %.cc
	$(CCC) -F $(CPPFLAGS) $*.cc | $(INDENT) | sed '/^#/d' > $@

.SUFFIXES:
.SUFFIXES: .files .c++ .c .i .s++ .s .saber++ $(SUFFIXES)

.cc.files:
	$(CCC) -E -H $(CPPFLAGS) $< 1> /dev/null 2> $*.files

.cc.i:
	$(CCC) -E $(CPPFLAGS) $< > $*.i

.cc.c:
	$(CCC) -F $(CPPFLAGS) $< | \
		sed -e '/^#/d' -e '/^\/\* the end \*\/$$/d' | \
		$(INDENT) > $*.c

.c.c++:
	c++filt < $*.c > $*.c++

.cc.s:
	$(CCC) $(CFLAGS) $(CPPFLAGS) -Qproduce .s $(OUTPUT_OPTION) $<

.s.s++:
	c++filt < $< > $*.s++

.cc.saber++:
	#load $(CPPFLAGS) $<

All:: all

g:: g.so g.a

clean.o:: clean.o.O clean.o.g clean.o.pic clean.o.a clean.i.o clean_m.o
	if test -d $(OBJ_FORMAT)_O;	then $(RM) -rf $(OBJ_FORMAT)_O;	fi
	if test -d $(OBJ_FORMAT)_g;	then $(RM) -rf $(OBJ_FORMAT)_g;	fi
	if test -d $(OBJ_FORMAT)_pic_O;	then $(RM) -rf $(OBJ_FORMAT)_pic_O;	fi
	if test -d $(OBJ_FORMAT)_pic_g;	then $(RM) -rf $(OBJ_FORMAT)_pic_g;	fi

clean.i.o::
	if test -d i_$(OBJ_FORMAT)_g;	  then $(RM) -rf i_$(OBJ_FORMAT)_g; fi
	if test -d i_$(OBJ_FORMAT)_pic_g; then $(RM) -rf i_$(OBJ_FORMAT)_pic_g; fi

clean.i:: clean.i.o
	if test -d i;			then $(RM) -rf i;			fi

clean_m:: clean_m.o
	$(RM) mallomar.out

clean_m.o::
	if test -d m_$(OBJ_FORMAT)_O;	then $(RM) -rf m_$(OBJ_FORMAT)_O;	fi
	if test -d m_$(OBJ_FORMAT)_g;	then $(RM) -rf m_$(OBJ_FORMAT)_g;	fi

clean:: clean.o clean.i clean_m
