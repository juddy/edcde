/* thinkc.cfg: Configuration file for sgmls on the MAC with THINK C. */
/* Contributed by John Chew (jjch@@AIS.Berger-Levrault.FR) */

/* Define this to allow tracing. */
/* #define TRACE 1 */

/* Define HAVE_EXTENDED_PRINTF if your *printf functions supports
X/Open extensions; if they do, then, for example,

  printf("%2$s%1$s", "bar", "foo")

should print `foobar'.  */

/* #define HAVE_EXTENDED_PRINTF 1 */

/* Define HAVE_CAT if your system provides the X/Open message
catalogue functions catopen() and catgets(), and you want to use them.
An implementations of these functions is included and will be used if
you don't define this.  On SunOS 4.1.1, if you do define this you
should set CC=/usr/xpg2bin/cc in the makefile. */

/* #define HAVE_CAT 1 */

#ifdef __STDC__
/* Define this if your compiler supports prototypes. */
#define USE_PROTOTYPES 1
#endif

#ifdef __OBJECTCENTER__
/* Define this if you have <varargs.h> but not <stdarg.h> */
/* #define VARARGS 1 */
#endif

#ifndef USE_PROTOTYPES
/* Use VARARGS if prototypes are not supported. */
#ifndef VARARGS
#define VARARGS 1
#endif
#endif /* not USE_PROTOTYPES */

/* Define this if you do not have strerror(). */
/* #define STRERROR_MISSING 1 */

/* Define this unless the character testing functions in ctype.h
are defined for all values representable as an unsigned char.  You do
not need to define this if your system is ANSI C conformant.  You
should define for old Unix systems. */
/* #define USE_ISASCII 1 */

/* Define this if your system provides the BSD style string operations
rather than ANSI C ones (eg bcopy() rather than memcpy(), and index()
rather than strchr()). */
/* #define BSD_STRINGS 1 */

/* Define this if you have getopt(). */
/* #define HAVE_GETOPT 1 */

#define PATH_FILE_SEP ':'
#define DEFAULT_PATH "/8214808651/lib/%O/%C/%T;%N.%X;%N.%D"
#define PATH_ENV_VAR "SGML_PATH"
#define SYSID_FILE_SEP ':'
#define MIN_DAT_SUBS_FROM " /"
#define MIN_DAT_SUBS_TO   "_%"

/* Define this if you have access(). */
/* #define HAVE_ACCESS 1 */

/* Define this if you have <unistd.h>. */
/* #define HAVE_UNISTD_H 1 */

/* Define this if you have waitpid(). */
/* #define HAVE_WAITPID 1 */

/* Define this you want support for subdocuments.  This is implemented
using features that are not part of Standard C. */
/* #define SUPPORT_SUBDOC 1 */

/* Define this if your system is POSIX.1 (ISO 9945-1:1990) compliant. */
/* #define POSIX 1 */

/* POSIX.1 compliant systems will certainly have access(), <unistd.h>,
and waitpid(). */
#ifdef POSIX
#ifndef HAVE_ACCESS
#define HAVE_ACCESS 1
#endif
#ifndef HAVE_UNISTD_H
#define HAVE_UNISTD_H 1
#endif
#ifndef HAVE_WAITPID
#define HAVE_WAITPID 1
#endif
#endif /* POSIX */

/* Define this if you have the vfork() system call. */
/* #define HAVE_VFORK 1 */

/* Define this if you have <vfork.h>. */
/* #define HAVE_VFORK_H 1 */

/* Define this if you don't have <stdlib.h> */
/* #define STDLIB_H_MISSING 1 */

/* Define this if you don't have <stddef.h> */
/* #define STDDEF_H_MISSING 1 */

/* Define this if you don't have remove(); unlink() will be used instead. */
/* #define REMOVE_MISSING 1 */

/* Define this if you don't have raise(); kill() will be used instead. */
/* #define RAISE_MISSING 1 */

/* Universal pointer type. */
/* Use this if your compiler doesn't fully support void * */
/* typedef char *UNIV; */
/* Otherwise use this */
typedef void *UNIV;

typedef void VOID;            /* void as a function return type */

/* If you don't have an ANSI C conformant <limits.h>, define
CHAR_SIGNED as 1 or 0 according to whether the `char' type is signed.
The <limits.h> on some versions of System Release V 3.2 is not ANSI C
conformant: the value of CHAR_MIN is 0 even though the `char' type is
signed. */

/* #define CHAR_SIGNED 1 */
/* #define CHAR_SIGNED 0 */
#ifndef CHAR_SIGNED
#include <limits.h>
#if CHAR_MIN < 0
#define CHAR_SIGNED 1
#else
#define CHAR_SIGNED 0
#endif
#endif /* not CHAR_SIGNED */

/* Assume the system character set is ISO Latin-1. */
#include "latin1.h"

#include <console.h>

/* This is called by main().  It prompts for a Unix style command line. */
#define MAIN_HOOK(argc, argv) (argc = ccommand(&argv))
