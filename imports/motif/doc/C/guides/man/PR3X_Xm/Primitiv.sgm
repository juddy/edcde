<!-- $XConsortium: Primitiv.sgm /main/12 1996/09/08 20:55:32 rws $ -->
<!-- (c) Copyright 1995 Digital Equipment Corporation. -->
<!-- (c) Copyright 1995 Hewlett-Packard Company. -->
<!-- (c) Copyright 1995 International Business Machines Corp. -->
<!-- (c) Copyright 1995 Sun Microsystems, Inc. -->
<!-- (c) Copyright 1995 Novell, Inc. -->
<!-- (c) Copyright 1995 FUJITSU LIMITED. -->
<!-- (c) Copyright 1995 Hitachi. -->

<RefEntry Id="CDEMMA.MAN343.rsml.1">
<RefMeta>
<RefEntryTitle>XmPrimitive</RefEntryTitle>
<ManVolNum>library call</ManVolNum>
</RefMeta>
<RefNameDiv>
<RefName><Classname>XmPrimitive</Classname></RefName>
<RefPurpose>The Primitive widget class
<IndexTerm>
<Primary>XmPrimitive</Primary>
</IndexTerm><IndexTerm>
<Primary>widget class</Primary>
<Secondary>Primitive</Secondary>
</IndexTerm></RefPurpose>
</RefNameDiv>
<!-- -->
<!-- @OSF_COPYRIGHT@-->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (MOTIF). See the file named COPY.MOTIF.DOC for-->
<!-- the full copyright text.-->
<!-- -->
<!-- HISTORY-->
<!-- -->
<!-- **-->
<!-- **-->
<!-- **  (c) Copyright 1989, 1990, 1992 by Open Software Foundation, Inc.-->
<!-- **      All Rights Reserved.-->
<!-- **-->
<!-- **  (c) Copyright 1987, 1988, 1989, by Hewlett-Packard Company-->
<!-- **-->
<!-- **  (c) Copyright 1987, 1988 by Digital Equipment Corporation,-->
<!-- **      Maynard, MA.  All Rights Reserved.-->
<!-- **-->
<!-- **-->
<RefSynopsisDiv>
<Synopsis>&npzwc;#include &lt;Xm/Xm.h>
</Synopsis>
</RefSynopsisDiv>
<RefSect1>
<Title>DESCRIPTION</Title>
<Para>Primitive is a widget class used as a supporting superclass
for other widget classes. It handles border drawing and highlighting,
traversal activation and deactivation, and various callback lists needed by
Primitive widgets.
Primitive and all its subclasses hold the <Symbol Role="Globalvar">XmQTcareParentVisual</Symbol> trait.
</Para>
<RefSect2>
<Title>Data Transfer Behavior</Title>
<Para>Primitive has no widget class conversion or destination procedure.
Subclasses and the <SystemItem Class="Resource">XmNconvertCallback</SystemItem> procedures are responsible
for any conversion of selections.
Subclasses and the subclass <SystemItem Class="Resource">XmNdestinationCallback</SystemItem> procedures are
responsible for any data transfers to the widget.
</Para>
</RefSect2>
<RefSect2>
<Title>Classes</Title>
<Para>Primitive inherits behavior, resources, and traits from <Classname>Core</Classname>.
</Para>
<Para>The class pointer is <Symbol Role="Globalvar">xmPrimitiveWidgetClass</Symbol>.
</Para>
<Para>The class name is <Classname>XmPrimitive</Classname>.
</Para>
</RefSect2>
<RefSect2>
<Title>New Resources</Title>
<Para>The following table defines a set of widget resources used by the programmer
to specify data. The programmer can also set the resource values for the
inherited classes to set attributes for this widget. To reference a
resource by name or by class in a <Filename>.Xdefaults</Filename> file, remove the <SystemItem Class="Constant">XmN</SystemItem> or
<SystemItem Class="Constant">XmC</SystemItem> prefix and use the remaining letters. To specify one of the defined
values for a resource in a <Filename>.Xdefaults</Filename> file, remove the <SystemItem Class="Constant">Xm</SystemItem> prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words).
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using <Function>XtSetValues</Function> (S),
retrieved by using <Function>XtGetValues</Function> (G), or is not applicable (N/A).
</Para>
<Para><!-- --><!-- @OSF_COPYRIGHT@--><!-- COPYRIGHT NOTICE--><!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.--><!-- ALL RIGHTS RESERVED (MOTIF). See the file named COPY.MOTIF.DOC for--><!-- the full copyright text.--><!-- --><!-- HISTORY--><!-- --></Para>
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Cols="5">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colname="1">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colname="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colname="3">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colname="4">
<ColSpec Rowsep="1" Align="Left" Colname="5">
<TBody>
<Row>
<Entry Align="Center" Nameend="5" Namest="1"><Literal>XmPrimitive Resource Set</Literal></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Name</Literal></Entry>
<Entry Rowsep="1"><Literal>Class</Literal></Entry>
<Entry Rowsep="1"><Literal>Type</Literal></Entry>
<Entry Rowsep="1"><Literal>Default</Literal></Entry>
<Entry Rowsep="1"><Literal>Access</Literal></Entry>
</Row>
<Row>
<Entry>XmNbottomShadowColor</Entry>
<Entry>XmCBottomShadowColor</Entry>
<Entry>Pixel</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNbottomShadowPixmap</Entry>
<Entry>XmCBottomShadowPixmap</Entry>
<Entry>Pixmap</Entry>
<Entry>XmUNSPECIFIED_PIXMAP</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNconvertCallback</Entry>
<Entry>XmCCallback</Entry>
<Entry>XtCallbackList</Entry>
<Entry>NULL</Entry>
<Entry>C</Entry>
</Row>
<Row>
<Entry>XmNforeground</Entry>
<Entry>XmCForeground</Entry>
<Entry>Pixel</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNhelpCallback</Entry>
<Entry>XmCCallback</Entry>
<Entry>XtCallbackList</Entry>
<Entry>NULL</Entry>
<Entry>C</Entry>
</Row>
<Row>
<Entry>XmNhighlightColor</Entry>
<Entry>XmCHighlightColor</Entry>
<Entry>Pixel</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNhighlightOnEnter</Entry>
<Entry>XmCHighlightOnEnter</Entry>
<Entry>Boolean</Entry>
<Entry>False</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNhighlightPixmap</Entry>
<Entry>XmCHighlightPixmap</Entry>
<Entry>Pixmap</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNhighlightThickness</Entry>
<Entry>XmCHighlightThickness</Entry>
<Entry>Dimension</Entry>
<Entry>2</Entry>
<Entry>CSG</Entry>
</Row>
<!--no-op:  .tH-->
<Row>
<Entry>XmNlayoutDirection</Entry>
<Entry>XmCLayoutDirection</Entry>
<Entry>XmDirection</Entry>
<Entry>dynamic</Entry>
<Entry>CG</Entry>
</Row>
<Row>
<Entry>XmNnavigationType</Entry>
<Entry>XmCNavigationType</Entry>
<Entry>XmNavigationType</Entry>
<Entry>XmNONE</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNpopupHandlerCallback</Entry>
<Entry>XmCCallback</Entry>
<Entry>XtCallbackList</Entry>
<Entry>NULL</Entry>
<Entry>C</Entry>
</Row>
<Row>
<Entry>XmNshadowThickness</Entry>
<Entry>XmCShadowThickness</Entry>
<Entry>Dimension</Entry>
<Entry>2</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNtopShadowColor</Entry>
<Entry>XmCTopShadowColor</Entry>
<Entry>Pixel</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNtopShadowPixmap</Entry>
<Entry>XmCTopShadowPixmap</Entry>
<Entry>Pixmap</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNtraversalOn</Entry>
<Entry>XmCTraversalOn</Entry>
<Entry>Boolean</Entry>
<Entry>True</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNunitType</Entry>
<Entry>XmCUnitType</Entry>
<Entry>unsigned char</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNuserData</Entry>
<Entry>XmCUserData</Entry>
<Entry>XtPointer</Entry>
<Entry>NULL</Entry>
<Entry>CSG</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
<VariableList>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNbottomShadowColor</SystemItem></Term>
<ListItem>
<Para>Specifies the color to use to draw the bottom and right sides of the
border shadow.
This color is used if the <SystemItem Class="Resource">XmNtopShadowPixmap</SystemItem> resource is
unspecified.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNbottomShadowPixmap</SystemItem></Term>
<ListItem>
<Para>Specifies the pixmap to use to draw the bottom and right sides of the
border shadow.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNconvertCallback</SystemItem></Term>
<ListItem>
<Para>Specifies a list of callbacks called when the widget is asked to convert
a selection.
The type of the structure whose address is passed to these callbacks is
<StructName Role="typedef">XmConvertCallbackStruct</StructName>.
The reason is <SystemItem Class="Constant">XmCR_OK</SystemItem>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNforeground</SystemItem></Term>
<ListItem>
<Para>Specifies the foreground drawing color used by Primitive widgets.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNhelpCallback</SystemItem></Term>
<ListItem>
<Para>Specifies the list of callbacks that is called when the help key
is pressed. The reason sent by the callback is <SystemItem Class="Constant">XmCR_HELP</SystemItem>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNhighlightColor</SystemItem></Term>
<ListItem>
<Para>Specifies the color of the highlighting rectangle.
This color is used if the highlight pixmap resource is
<SystemItem Class="Constant">XmUNSPECIFIED_PIXMAP</SystemItem>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNhighlightOnEnter</SystemItem></Term>
<ListItem>
<Para>Specifies if the highlighting rectangle is drawn when the cursor moves
into the widget.
If the shell's focus policy is <SystemItem Class="Constant">XmEXPLICIT</SystemItem>, this resource is
ignored, and the widget is highlighted when it has the focus.
If the shell's focus policy is <SystemItem Class="Constant">XmPOINTER</SystemItem> and if this resource is
True, the highlighting rectangle is drawn when the cursor moves into
the widget.
If the shell's focus policy is <SystemItem Class="Constant">XmPOINTER</SystemItem> and if this resource is
False, the highlighting rectangle is not drawn when the the cursor moves
into the widget.
The default is False.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNhighlightPixmap</SystemItem></Term>
<ListItem>
<Para>Specifies the pixmap used to draw the highlighting rectangle.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNhighlightThickness</SystemItem></Term>
<ListItem>
<Para>Specifies the thickness of the highlighting rectangle.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNlayoutDirection</SystemItem></Term>
<ListItem>
<Para>Specifies the direction in which components of the primitive (including
strings) are laid out. The values are of type <StructName Role="typedef">XmDirection</StructName>. If
the widget's parent is a primitive or shell, the value is inherited from
the widget's parent. Otherwise, it is inherited from the closest
ancestor vendor or menu shell. Refer to the &cdeman.XmDirection;
reference page for the possible direction values.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNnavigationType</SystemItem></Term>
<ListItem>
<Para>Determines whether the widget is a tab group.
</Para>
<VariableList>
<VarListEntry>
<Term><SystemItem Class="Constant">XmNONE</SystemItem></Term>
<ListItem>
<Para>Indicates that the widget is not a tab group.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmTAB_GROUP</SystemItem></Term>
<ListItem>
<Para>Indicates that the widget is a tab group, unless
the <SystemItem Class="Resource">XmNnavigationType</SystemItem> of another widget in the hierarchy is
<SystemItem Class="Constant">XmEXCLUSIVE_TAB_GROUP</SystemItem>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmSTICKY_TAB_GROUP</SystemItem></Term>
<ListItem>
<Para>Indicates that the widget is a tab group, even
if the <SystemItem Class="Resource">XmNnavigationType</SystemItem> of another widget in the hierarchy is
<SystemItem Class="Constant">XmEXCLUSIVE_TAB_GROUP</SystemItem>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmEXCLUSIVE_TAB_GROUP</SystemItem></Term>
<ListItem>
<Para>Indicates that the widget is a tab group and
that widgets in the hierarchy whose <SystemItem Class="Resource">XmNnavigationType</SystemItem> is
<SystemItem Class="Constant">XmTAB_GROUP</SystemItem> are not tab groups.
</Para>
<Para>When a parent widget has an <SystemItem Class="Resource">XmNnavigationType</SystemItem> of
<SystemItem Class="Constant">XmEXCLUSIVE_TAB_GROUP</SystemItem>, traversal of non-tab-group widgets within
the group is based on the order of those widgets in their parent's
<SystemItem Class="Resource">XmNchildren</SystemItem> list.
</Para>
<Para>When the <SystemItem Class="Resource">XmNnavigationType</SystemItem> of any widget in a hierarchy is
<SystemItem Class="Constant">XmEXCLUSIVE_TAB_GROUP</SystemItem>, traversal of tab groups in the hierarchy
proceeds to widgets in the order in which their <SystemItem Class="Resource">XmNnavigationType</SystemItem>
resources were specified as <SystemItem Class="Constant">XmEXCLUSIVE_TAB_GROUP</SystemItem> or
<SystemItem Class="Constant">XmSTICKY_TAB_GROUP</SystemItem>, whether by creating the widgets with that value,
by calling <Function>XtSetValues</Function>, or by calling <Function>XmAddTabGroup</Function>.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNpopupHandlerCallback</SystemItem></Term>
<ListItem>
<Para>Allows the application to control which popup menu will be
automatically posted. The reason can either be <SystemItem Class="Constant">XmCR_POST</SystemItem> or
<Literal>XmCR_REPOST:</Literal></Para>
<VariableList>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCR_POST</SystemItem></Term>
<ListItem>
<Para>Indicates that this is a regular posting request.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCR_REPOST</SystemItem></Term>
<ListItem>
<Para>Indicates that the menu was just unposted and that this callback was
invoked on a replay.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>This callback
uses the <StructName Role="typedef">XmPopupHandlerCallbackStruct</StructName>
structure to pass information.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNshadowThickness</SystemItem></Term>
<ListItem>
<Para>Specifies the size of the drawn border shadow.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNtopShadowColor</SystemItem></Term>
<ListItem>
<Para>Specifies the color to use to draw the top and left sides of the border
shadow.
This color is used if the <SystemItem Class="Resource">XmNtopShadowPixmap</SystemItem> resource is
unspecified.
If a default top shadow pixmap exists, it will need to be removed for
the <SystemItem Class="Resource">XmNtopShadowColor</SystemItem> to take effect.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNtopShadowPixmap</SystemItem></Term>
<ListItem>
<Para>Specifies the pixmap to use to draw the top and left sides of the border
shadow.
A Primitive top shadow pixmap is created in two situations. In either
of these situations, a default 50-foreground top shadow
pixmap is created.
</Para>
<ItemizedList>
<ListItem>
<Para>If the Primitive top shadow color is the same as the
Core background pixel color.
</Para>
</ListItem>
<ListItem>
<Para>If the depth of the screen is only one.
</Para>
</ListItem>
</ItemizedList>
<Para>For example, if a widget with the same top shadow and background color
is created, a default shadow pixmap is generated. Such a pixmap
needs to be removed for the <SystemItem Class="Resource">XmNtopShadowColor</SystemItem> resource to take
effect.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNtraversalOn</SystemItem></Term>
<ListItem>
<Para>Specifies if traversal is activated for this widget. In CascadeButton
and CascadeButtonGadget, this resource is forced to True unless the parent
is an OptionMenu.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNunitType</SystemItem></Term>
<ListItem>
<Para>Provides the basic support for resolution independence.
It defines the type of units a widget uses with sizing and
positioning resources.
If the widget's parent is a subclass of <Classname>XmManager</Classname> and if the
<SystemItem Class="Resource">XmNunitType</SystemItem> resource is not explicitly set, it defaults to the
unit type of the parent widget.
If the widget's parent is not a subclass of <Classname>XmManager</Classname>, the
resource has a default unit type of <SystemItem Class="Constant">XmPIXELS</SystemItem>.
</Para>
<Para>The unit type can also be specified in resource files, with the
following format:
</Para>
<InformalExample>
<ProgramListing><Symbol Role="Variable">&lt;floating value>&lt;unit></Symbol>
</ProgramListing>
</InformalExample>
<Para>where:
</Para>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">unit</Symbol></Term>
<ListItem>
<Para>is &lt;" ", pixels, inches, centimeters, millimeters, points, font units>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Emphasis>pixels</Emphasis></Term>
<ListItem>
<Para>is &lt;<Symbol Role="Variable">pix</Symbol>, <Symbol Role="Variable">pixel</Symbol>, <Emphasis>pixels</Emphasis>>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">inches</Symbol></Term>
<ListItem>
<Para>is &lt;<Symbol Role="Variable">in</Symbol>, <Symbol Role="Variable">inch</Symbol>, <Symbol Role="Variable">inches</Symbol>>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">centimeter</Symbol></Term>
<ListItem>
<Para>is &lt;<Symbol Role="Variable">cm</Symbol>, <Symbol Role="Variable">centimeter</Symbol>, <Symbol Role="Variable">centimeters</Symbol>>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">millimeters</Symbol></Term>
<ListItem>
<Para>is &lt;<Symbol Role="Variable">mm</Symbol>, <Symbol Role="Variable">millimeter</Symbol>, <Symbol Role="Variable">millimeters</Symbol>>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>points</Literal></Term>
<ListItem>
<Para>is &lt;<Symbol Role="Variable">pt</Symbol>, <Symbol Role="Variable">point</Symbol>, <Symbol Role="Variable">points</Symbol>>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>font units</Literal></Term>
<ListItem>
<Para>is &lt;<Symbol Role="Variable">fu</Symbol>, <Literal>font_unit</Literal>, <Literal>font_units</Literal>>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">float</Symbol></Term>
<ListItem>
<Para>is {"+"|"-"}{{&lt;"0"-"9">*}.}&lt;"0"-"9">*
</Para>
<Para>Note that the type Dimension must always be positive.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>For example,
</Para>
<InformalExample>
<ProgramListing>xmfonts*XmMainWindow.height: 10.4cm
*PostIn.width: 3inches
</ProgramListing>
</InformalExample>
<Para><SystemItem Class="Resource">XmNunitType</SystemItem> can have the following values:
</Para>
<VariableList>
<VarListEntry>
<Term><SystemItem Class="Constant">XmPIXELS</SystemItem></Term>
<ListItem>
<Para>All values provided to the widget are treated as normal
pixel values.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmMILLIMETERS</SystemItem></Term>
<ListItem>
<Para>All values provided to the widget are treated as normal millimeter
values.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol>Xm100TH_MILLIMETERS</Symbol></Term>
<ListItem>
<Para>All values provided to the widget are treated
as 1/100 of a millimeter.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCENTIMETERS</SystemItem></Term>
<ListItem>
<Para>All values provided to the widget are treated as normal centimeter
values.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmINCHES</SystemItem></Term>
<ListItem>
<Para>All values provided to the widget are treated as normal inch
values.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol>Xm1000TH_INCHES</Symbol></Term>
<ListItem>
<Para>All values provided to the widget are treated as
1/1000 of an inch.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmPOINTS</SystemItem></Term>
<ListItem>
<Para>All values provided to the widget are treated as normal point
values. A point is a unit used in text processing
applications and is defined as 1/72 of an inch.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol>Xm100TH_POINTS</Symbol></Term>
<ListItem>
<Para>All values provided to the widget are treated as
1/100 of a point. A point is a unit used in text processing
applications and is defined as 1/72 of an inch.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmFONT_UNITS</SystemItem></Term>
<ListItem>
<Para>All values provided to the widget are treated as normal font
units. A font unit has horizontal and vertical components.
These are the values of the XmScreen resources <SystemItem Class="Resource">XmNhorizontalFontUnit</SystemItem>
and <SystemItem Class="Resource">XmNverticalFontUnit</SystemItem>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol>Xm100TH_FONT_UNITS</Symbol></Term>
<ListItem>
<Para>All values provided to the widget are
treated as 1/100 of a font unit.
A font unit has horizontal and vertical components.
These are the values of the <Classname>XmScreen</Classname> resources <SystemItem Class="Resource">XmNhorizontalFontUnit</SystemItem>
and <SystemItem Class="Resource">XmNverticalFontUnit</SystemItem>.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Resource">XmNuserData</SystemItem></Term>
<ListItem>
<Para>Allows the application to attach any necessary specific data to the widget.
It is an internally unused resource.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Dynamic Color Defaults</Title>
<Para>The foreground, background, top shadow, bottom shadow, and
highlight color resources are dynamically defaulted.
If no color data is specified, the colors are
automatically generated. On a single-plane system, a black and white color
scheme is generated. Otherwise, four colors are
generated, which display the correct shading for the 3-D visuals.
If the background is the only color specified for a widget, the top
shadow and bottom shadow colors are generated to give the 3-D appearance.
Foreground and highlight colors are generated to provide sufficient
contrast with the background color.
</Para>
<Para>Colors are generated only at creation. Resetting the background through
<Function>XtSetValues</Function> does not regenerate the other colors.
<Function>XmChangeColor</Function> can be used to recalculate all associated colors
based on a new background color.
</Para>
</RefSect2>
<RefSect2>
<Title>Inherited Resources</Title>
<Para>Primitive inherits behavior and resources from the
superclass described in the following table.
For a complete description of each resource, refer to the
reference page for that superclass.
</Para>
<Para><!-- --><!-- @OSF_COPYRIGHT@--><!-- COPYRIGHT NOTICE--><!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.--><!-- ALL RIGHTS RESERVED (MOTIF). See the file named COPY.MOTIF.DOC for--><!-- the full copyright text.--><!-- --><!-- HISTORY--><!-- --><!--no-op:  .in--></Para>
<InformalTable Frame="All" Remap="center" Orient="Port">
<TGroup Cols="5">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colname="1">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colname="2">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colname="3">
<ColSpec Rowsep="1" Colsep="1" Align="Left" Colname="4">
<ColSpec Rowsep="1" Align="Left" Colname="5">
<TBody>
<Row>
<Entry Align="Center" Nameend="5" Namest="1"><Literal>Core Resource Set</Literal></Entry>
</Row>
<Row>
<Entry Rowsep="1"><Literal>Name</Literal></Entry>
<Entry Rowsep="1"><Literal>Class</Literal></Entry>
<Entry Rowsep="1"><Literal>Type</Literal></Entry>
<Entry Rowsep="1"><Literal>Default</Literal></Entry>
<Entry Rowsep="1"><Literal>Access</Literal></Entry>
</Row>
<Row>
<Entry>XmNaccelerators</Entry>
<Entry>XmCAccelerators</Entry>
<Entry>XtAccelerators</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNancestorSensitive</Entry>
<Entry>XmCSensitive</Entry>
<Entry>Boolean</Entry>
<Entry>dynamic</Entry>
<Entry>G</Entry>
</Row>
<Row>
<Entry>XmNbackground</Entry>
<Entry>XmCBackground</Entry>
<Entry>Pixel</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNbackgroundPixmap</Entry>
<Entry>XmCPixmap</Entry>
<Entry>Pixmap</Entry>
<Entry>XmUNSPECIFIED_PIXMAP</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNborderColor</Entry>
<Entry>XmCBorderColor</Entry>
<Entry>Pixel</Entry>
<Entry>XtDefaultForeground</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNborderPixmap</Entry>
<Entry>XmCPixmap</Entry>
<Entry>Pixmap</Entry>
<Entry>XmUNSPECIFIED_PIXMAP</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNborderWidth</Entry>
<Entry>XmCBorderWidth</Entry>
<Entry>Dimension</Entry>
<Entry>0</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNcolormap</Entry>
<Entry>XmCColormap</Entry>
<Entry>Colormap</Entry>
<Entry>dynamic</Entry>
<Entry>CG</Entry>
</Row>
<Row>
<Entry>XmNdepth</Entry>
<Entry>XmCDepth</Entry>
<Entry>int</Entry>
<Entry>dynamic</Entry>
<Entry>CG</Entry>
</Row>
<Row>
<Entry>XmNdestroyCallback</Entry>
<Entry>XmCCallback</Entry>
<Entry>XtCallbackList</Entry>
<Entry>NULL</Entry>
<Entry>C</Entry>
</Row>
<Row>
<Entry>XmNheight</Entry>
<Entry>XmCHeight</Entry>
<Entry>Dimension</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNinitialResourcesPersistent</Entry>
<Entry>XmCInitialResourcesPersistent</Entry>
<Entry>Boolean</Entry>
<Entry>True</Entry>
<Entry>C</Entry>
</Row>
<Row>
<Entry>XmNmappedWhenManaged</Entry>
<Entry>XmCMappedWhenManaged</Entry>
<Entry>Boolean</Entry>
<Entry>True</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNscreen</Entry>
<Entry>XmCScreen</Entry>
<Entry>Screen *</Entry>
<Entry>dynamic</Entry>
<Entry>CG</Entry>
</Row>
<Row>
<Entry>XmNsensitive</Entry>
<Entry>XmCSensitive</Entry>
<Entry>Boolean</Entry>
<Entry>True</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNtranslations</Entry>
<Entry>XmCTranslations</Entry>
<Entry>XtTranslations</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNwidth</Entry>
<Entry>XmCWidth</Entry>
<Entry>Dimension</Entry>
<Entry>dynamic</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNx</Entry>
<Entry>XmCPosition</Entry>
<Entry>Position</Entry>
<Entry>0</Entry>
<Entry>CSG</Entry>
</Row>
<Row>
<Entry>XmNy</Entry>
<Entry>XmCPosition</Entry>
<Entry>Position</Entry>
<Entry>0</Entry>
<Entry>CSG</Entry>
</Row>
</TBody>
</TGroup>
</InformalTable>
</RefSect2>
<RefSect2>
<Title>Callback Information</Title>
<Para>A pointer to the following structure is passed to each callback for
<SystemItem Class="Resource">XmNhelpCallback</SystemItem>:
</Para>
<Synopsis>typedef struct
{
        int <Symbol Role="Variable">reason</Symbol>;
        XEvent <Symbol Role="Variable">* event</Symbol>;
} XmAnyCallbackStruct;</Synopsis>
<!--no-op:  .fi-->
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">reason</Symbol></Term>
<ListItem>
<Para>Indicates why the callback was invoked.
For this callback, <Symbol Role="Variable">reason</Symbol> is set to <SystemItem Class="Constant">XmCR_HELP</SystemItem>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">event</Symbol></Term>
<ListItem>
<Para>Points to the <Symbol>XEvent</Symbol> that triggered the callback.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>A pointer to the following callback structure is passed to the
<SystemItem Class="Resource">XmNconvertCallback</SystemItem> procedures:
</Para>
<Synopsis>typedef struct
{
        int <Symbol Role="Variable">reason</Symbol>;
        XEvent *<Symbol Role="Variable">event</Symbol>;
        Atom <Symbol Role="Variable">selection</Symbol>;
        Atom <Symbol Role="Variable">target</Symbol>;
        XtPointer <Symbol Role="Variable">source_data</Symbol>;
        XtPointer location_data;
        int <Symbol Role="Variable">flags</Symbol>;
        XtPointer <Symbol Role="Variable">parm</Symbol>;
        int <Symbol Role="Variable">parm_format</Symbol>;
        unsigned long <Symbol Role="Variable">parm_length</Symbol>;
        Atom <Symbol Role="Variable">parm_type</Symbol>;
        int <Symbol Role="Variable">status</Symbol>;
        XtPointer <Symbol Role="Variable">value</Symbol>;
        Atom <Symbol Role="Variable">type</Symbol>;
        int <Symbol Role="Variable">format</Symbol>;
        unsigned long <Symbol Role="Variable">length</Symbol>;
} XmConvertCallbackStruct;</Synopsis>
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">reason</Symbol></Term>
<ListItem>
<Para>Indicates why the callback was invoked.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">event</Symbol></Term>
<ListItem>
<Para>Points to the <Symbol>XEvent</Symbol> that triggered the callback.
It can be NULL.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">selection</Symbol></Term>
<ListItem>
<Para>Indicates the selection for which conversion is being requested.
Possible values are <Symbol Role="Define">CLIPBOARD</Symbol>, <Symbol Role="Define">PRIMARY</Symbol>, <Symbol Role="Define">SECONDARY</Symbol>,
and <Property>_MOTIF_DROP</Property>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">target</Symbol></Term>
<ListItem>
<Para>Indicates the conversion target.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">source_data</Symbol></Term>
<ListItem>
<Para>Contains information about the selection source.
When the selection is <Property>_MOTIF_DROP</Property>, <Symbol Role="Variable">source_data</Symbol> is the
DragContext.
Otherwise, it is NULL.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>location_data</Literal></Term>
<ListItem>
<Para>Contains information about the location of data to be converted.
If the value is NULL, the data to be transferred consists of the
widget's current selection.
Otherwise, the type and interpretation of the value are specific to the
widget class.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">flags</Symbol></Term>
<ListItem>
<Para>Indicates the status of the conversion. Following are the possible
values:
</Para>
<VariableList>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCONVERTING_NONE</SystemItem></Term>
<ListItem>
<Para>This flag is currently unused.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCONVERTING_PARTIAL</SystemItem></Term>
<ListItem>
<Para>The target widget was able to be converted, but some data was lost.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCONVERTING_SAME</SystemItem></Term>
<ListItem>
<Para>The conversion target is the source of the data to be transferred.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCONVERTING_TRANSACT</SystemItem></Term>
<ListItem>
<Para>This flag is currently unused.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">parm</Symbol></Term>
<ListItem>
<Para>Contains parameter data for this target.
If no parameter data exists, the value is NULL.
</Para>
<Para>When <Symbol Role="Variable">selection</Symbol> is <Symbol Role="Define">CLIPBOARD</Symbol> and <Symbol Role="Variable">target</Symbol> is
<Property>_MOTIF_CLIPBOARD_TARGETS</Property> or
<Property>_MOTIF_DEFERRED_CLIPBOARD_TARGETS</Property>, the value is the requested
operation (<SystemItem Class="Constant">XmCOPY</SystemItem>, <SystemItem Class="Constant">XmMOVE</SystemItem>, or <SystemItem Class="Constant">XmLINK</SystemItem>).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">parm_format</Symbol></Term>
<ListItem>
<Para>Specifies whether the data in <Symbol Role="Variable">parm</Symbol> should be viewed
as a list of <Symbol Role="Variable">char</Symbol>, <Symbol Role="Variable">short</Symbol>, or <Symbol Role="Variable">long</Symbol> quantities.
Possible values are 0 (when <Symbol Role="Variable">parm</Symbol> is NULL),
8 (when the data in <Symbol Role="Variable">parm</Symbol> should be viewed as a list of <Symbol Role="Variable">char</Symbol>s),
16 (when the data in <Symbol Role="Variable">parm</Symbol> should be viewed as a list of <Symbol Role="Variable">short</Symbol>s),
or 32 (when the data in <Symbol Role="Variable">parm</Symbol> should be viewed as a list of <Symbol Role="Variable">long</Symbol>s).
Note that <Symbol Role="Variable">parm_format</Symbol> symbolizes a data type, not the number of bits
in each list element.
For example, on some machines, a <Symbol Role="Variable">parm_format</Symbol> of 32 means that
the data in <Symbol Role="Variable">parm</Symbol> should be viewed as a list of 64-bit quantities,
not 32-bit quantities.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">parm_length</Symbol></Term>
<ListItem>
<Para>Specifies the number of elements of data in <Symbol Role="Variable">parm</Symbol>, where each
element has the size specified by <Symbol Role="Variable">parm_format</Symbol>.
When <Symbol Role="Variable">parm</Symbol> is NULL, the value is 0.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">parm_type</Symbol></Term>
<ListItem>
<Para>Specifies the parameter type of <Symbol Role="Variable">parm</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">status</Symbol></Term>
<ListItem>
<Para>An IN/OUT member that specifies the status of the conversion.
The initial value is <SystemItem Class="Constant">XmCONVERT_DEFAULT</SystemItem>.
The callback procedure can set this member to one of the following
values:
</Para>
<VariableList>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCONVERT_DEFAULT</SystemItem></Term>
<ListItem>
<Para>This value means that the widget class conversion procedure, if any, is
called after the callback procedures return.
If the widget class conversion procedure produces any data, it
overwrites the data provided by the callback procedures in the <Symbol Role="Variable">value</Symbol>
member.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCONVERT_MERGE</SystemItem></Term>
<ListItem>
<Para>This value means that the widget class conversion procedure, if any, is
called after the callback procedures return.
If the widget class conversion procedure produces any data, it appends
its data to the data provided by the callback procedures in the
<Symbol Role="Variable">value</Symbol> member.
This value is intended for use with targets that result in lists of
data, such as <Symbol Role="Define">TARGETS</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCONVERT_DONE</SystemItem></Term>
<ListItem>
<Para>This value means that the callback procedure has successfully finished
the conversion.
The widget class conversion procedure, if any, is not called after the
callback procedures return.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><SystemItem Class="Constant">XmCONVERT_REFUSE</SystemItem></Term>
<ListItem>
<Para>This value means that the callback procedure has terminated the
conversion process without completing the requested conversion.
The widget class conversion procedure, if any, is not called after the
callback procedures return.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">value</Symbol></Term>
<ListItem>
<Para>An IN/OUT parameter that contains any data that the callback procedure
produces as a result of the conversion.
The initial value is NULL.
If the callback procedure sets this member, it must ensure that the
<Symbol Role="Variable">type</Symbol>, <Symbol Role="Variable">format</Symbol>, and <Symbol Role="Variable">length</Symbol> members correspond
to the data in <Symbol Role="Variable">value</Symbol>.
The callback procedure is responsible for allocating memory when it sets
this member.
The toolkit frees this memory when it is no longer needed.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">type</Symbol></Term>
<ListItem>
<Para>An IN/OUT parameter that indicates the type of the data in the
<Symbol Role="Variable">value</Symbol> member.
The initial value is <Symbol Role="Define">INTEGER</Symbol>.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">format</Symbol></Term>
<ListItem>
<Para>An IN/OUT parameter that specifies whether the data in <Symbol Role="Variable">value</Symbol> should
be viewed as a list of <Symbol Role="Variable">char</Symbol>, <Symbol Role="Variable">short</Symbol>, or <Symbol Role="Variable">long</Symbol> quantities.
The initial value is 8.
The callback procedure can set this member to 8 (for a list of <Symbol Role="Variable">char</Symbol>),
16 (for a list of <Symbol Role="Variable">short</Symbol>), or 32 (for a list of <Symbol Role="Variable">long</Symbol>).
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">length</Symbol></Term>
<ListItem>
<Para>An IN/OUT member that specifies the number of elements of data in
<Symbol Role="Variable">value</Symbol>, where each element has the size symbolized by <Symbol Role="Variable">format</Symbol>.
The initial value is 0.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<Para>A pointer to the following structure is passed to each callback for
<SystemItem Class="Resource">XmNpopupHandlerCallback</SystemItem>:
</Para>
<Synopsis>typedef struct
{
        int <Symbol Role="Variable">reason</Symbol>;
        XEvent <Symbol Role="Variable">* xevent</Symbol>;
        Widget <Symbol Role="Variable">menuToPost</Symbol>;
        Boolean <Symbol Role="Variable">postIt</Symbol>;
        Widget <Symbol Role="Variable">target</Symbol>;
} XmPopupHandlerCallbackStruct;</Synopsis>
<!--no-op:  .fi-->
<VariableList>
<VarListEntry>
<Term><Symbol Role="Variable">reason</Symbol></Term>
<ListItem>
<Para>Indicates why the callback was invoked.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">xevent</Symbol></Term>
<ListItem>
<Para>Points to the <Symbol>XEvent</Symbol> that triggered the handler.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">menuToPost</Symbol></Term>
<ListItem>
<Para>Specifies the popup menu that the menu system believes should be
posted. The application may modify this field.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">postIt</Symbol></Term>
<ListItem>
<Para>Indicates whether the posting process should continue. The
application may modify this field.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Symbol Role="Variable">target</Symbol></Term>
<ListItem>
<Para>Specifies the most specific widget or gadget that the menu sytem found
from the event that matches the event.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!-- -->
<!-- @OSF_COPYRIGHT@-->
<!-- COPYRIGHT NOTICE-->
<!-- Copyright (c) 1990, 1991, 1992, 1993 Open Software Foundation, Inc.-->
<!-- ALL RIGHTS RESERVED (MOTIF). See the file named COPY.MOTIF.DOC for-->
<!-- the full copyright text.-->
<!-- -->
<!-- HISTORY-->
<!-- -->
<!-- Action Table for XmPrimitive -->
</RefSect2>
<RefSect2>
<Title>Translations</Title>
<Para>The <Classname>XmPrimitive</Classname> translations are listed below.
</Para>
<Para>Note that for buttons in menus, altering translations in <Literal>#override</Literal>
or <Literal>#augment</Literal> mode is undefined.
</Para>
<Para>The following key names are listed in the
X standard key event translation table syntax.
This format is the one used by Motif to
specify the widget actions corresponding to a given key.
A brief overview of the format is provided under
&cdeman.VirtualBindings;.
For a complete description of the format, please refer to the
X Toolkit Instrinsics Documentation.
</Para>
<VariableList>
<VarListEntry>
<Term><Literal>:</Literal><KeySym>Key</KeySym><KeySym>osfActivate</KeySym>:</Term>
<ListItem>
<Para><Action>PrimitiveParentActivate()</Action>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>:</Literal><KeySym>Key</KeySym><KeySym>osfCancel</KeySym>:</Term>
<ListItem>
<Para><Action>PrimitiveParentCancel()</Action>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>:</Literal><KeySym>Key</KeySym><KeySym>osfBeginLine</KeySym>:</Term>
<ListItem>
<Para><Action>PrimitiveTraverseHome()</Action>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>:</Literal><KeySym>Key</KeySym><KeySym>osfUp</KeySym>:</Term>
<ListItem>
<Para><Action>PrimitiveTraverseUp()</Action>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>:</Literal><KeySym>Key</KeySym><KeySym>osfDown</KeySym>:</Term>
<ListItem>
<Para><Action>PrimitiveTraverseDown()</Action>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>:</Literal><KeySym>Key</KeySym><KeySym>osfLeft</KeySym>:</Term>
<ListItem>
<Para><Action>PrimitiveTraverseLeft()</Action>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>:</Literal><KeySym>Key</KeySym><KeySym>osfRight</KeySym>:</Term>
<ListItem>
<Para><Action>PrimitiveTraverseRight()</Action>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&ap;s &ap;m &ap;a</Literal> <KeySym>Key</KeySym><Literal>Return</Literal>:</Term>
<ListItem>
<Para><Action>PrimitiveParentActivate()</Action>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>s &ap;m &ap;a</Literal> <KeySym>Key</KeySym><Literal>Tab</Literal>:</Term>
<ListItem>
<Para><Action>PrimitivePrevTabGroup()</Action>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Literal>&ap;m &ap;a</Literal> <KeySym>Key</KeySym><Literal>Tab</Literal>:</Term>
<ListItem>
<Para><Action>PrimitiveNextTabGroup()</Action>
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><KeySym>Key</KeySym><KeySym>osfHelp</KeySym>:</Term>
<ListItem>
<Para><Action>PrimitiveHelp()</Action>
</Para>
</ListItem>
</VarListEntry>
</VariableList>
<!--These translations may not directly correspond to a
translation table.
.PP
Note that for buttons in menus, altering translations in &bsol;*L#override&bsol;*O
or &bsol;*L#augment&bsol;*O mode is undefined.
.VL 2i 0 1
.LI "&bsol;*LKUp:&bsol;*O"
&bsol;*LPrimitiveTraverseUp()&bsol;*O
.LI "&bsol;*LKDown:&bsol;*O"
&bsol;*LPrimitiveTraverseDown()&bsol;*O
.LI "&bsol;*LKLeft:&bsol;*O"
&bsol;*LPrimitiveTraverseLeft()&bsol;*O
.LI "&bsol;*LKRight:&bsol;*O"
&bsol;*LPrimitiveTraverseRight()&bsol;*O
.LI "&bsol;*LKBeginLine:&bsol;*O"
&bsol;*LPrimitiveTraverseHome()&bsol;*O
.LI "&bsol;*LKNextField:&bsol;*O"
&bsol;*LPrimitiveNextTabGroup()&bsol;*O
.LI "&bsol;*LKPrevField:&bsol;*O"
&bsol;*LPrimitivePrevTabGroup()&bsol;*O
.LI "&bsol;*LKActivate:&bsol;*O"
&bsol;*LPrimitiveParentActivate()&bsol;*O
.LI "&bsol;*LKCancel:&bsol;*O"
&bsol;*LPrimitiveParentCancel()&bsol;*O
.LI "&bsol;*LKHelp:&bsol;*O"
&bsol;*LPrimitiveHelp()&bsol;*O
.LE
-->
</RefSect2>
<RefSect2>
<Title>Action Routines</Title>
<Para>The <Classname>XmPrimitive</Classname> action routines are
</Para>
<VariableList>
<VarListEntry>
<Term><Action>PrimitiveHelp()</Action>:</Term>
<ListItem>
<Para>Calls the callbacks for <SystemItem Class="Resource">XmNhelpCallback</SystemItem> if any exist. If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitiveNextTabGroup()</Action>:</Term>
<ListItem>
<Para>This action depends on the value of the Display resource
<SystemItem Class="Resource">XmNenableButtonTab</SystemItem>. When <SystemItem Class="Resource">XmNenableButtonTab</SystemItem> is False
(default), this action traverses to the first item in the next tab
group. If the current tab group is the last entry in the tab group
list, it wraps to the beginning of the tab group list.
</Para>
<Para>When <SystemItem Class="Resource">XmNenableButtonTab</SystemItem> is True, this action moves to the next
item within the current tab group, unless it is the last item in the
tab group. When the item is the last in the group, the action
traverses to the first item in the next tab group. The
<SystemItem Class="Resource">XmNenableButtonTab</SystemItem> behavior applies only to PushButton, ArrowButton,
and DrawnArrow.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitiveParentActivate()</Action>:</Term>
<ListItem>
<Para>If the parent is a manager,
passes the <Literal>KActivate</Literal> event received by the widget
to the parent.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitiveParentCancel()</Action>:</Term>
<ListItem>
<Para>If the parent is a manager,
passes the <Literal>KCancel</Literal> event received by the widget
to the parent.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitivePrevTabGroup()</Action>:</Term>
<ListItem>
<Para>This action depends on the value of the Display resource
<SystemItem Class="Resource">XmNenableButtonTab</SystemItem>. When <SystemItem Class="Resource">XmNenableButtonTab</SystemItem> is False
(default), this action traverses to the first item in the previous tab
group. If the beginning of the tab group list is reached, it wraps to
the end of the tab group list.
</Para>
<Para>When <SystemItem Class="Resource">XmNenableButtonTab</SystemItem> is True, this action moves to the
previous item within the current tab group unless it is the first item
in the tab group. When the item is the first in the group, the action
traverses to the first item in the previous tab group. The
<SystemItem Class="Resource">XmNenableButtonTab</SystemItem> behavior applies only PushButton, ArrowButton, and
DrawnButton.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitiveTraverseDown()</Action>:</Term>
<ListItem>
<Para>Traverses to the next item below the current widget in the current tab
group, wrapping if necessary.
The wrapping direction depends on the layout direction of the
widget tab group.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitiveTraverseHome()</Action>:</Term>
<ListItem>
<Para>Traverses to the first widget or gadget in the current tab group.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitiveTraverseLeft()</Action>:</Term>
<ListItem>
<Para>Traverses to the next item to the left of the current widget in the
current tab group, wrapping if necessary.
The wrapping direction depends on the layout direction of the
widget tab group.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitiveTraverseNext()</Action>:</Term>
<ListItem>
<Para>Traverses to the next item in the current tab group, wrapping if
necessary.
The wrapping direction depends on the layout direction of the
widget tab group.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitiveTraversePrev()</Action>:</Term>
<ListItem>
<Para>Traverses to the previous item in the current tab group, wrapping if
necessary.
The wrapping direction depends on the layout direction of the
widget tab group.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitiveTraverseRight()</Action>:</Term>
<ListItem>
<Para>Traverses to the next item to the right of the current gadget in the
current tab group, wrapping if necessary.
The wrapping direction depends on the layout direction of the
widget tab group.
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><Action>PrimitiveTraverseUp()</Action>:</Term>
<ListItem>
<Para>Traverses to the next item above the current gadget in the current tab
group, wrapping if necessary.
The wrapping direction depends on the layout direction of the
widget tab group.
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Additional Behavior</Title>
<Para>This widget has the following additional behavior:
</Para>
<VariableList>
<VarListEntry>
<Term><KeySym>FocusIn</KeySym>:</Term>
<ListItem>
<Para>If the shell's keyboard focus policy is <SystemItem Class="Constant">XmEXPLICIT</SystemItem>, highlights the
widget and gives it the focus
</Para>
</ListItem>
</VarListEntry>
<VarListEntry>
<Term><KeySym>FocusOut</KeySym>:</Term>
<ListItem>
<Para>If the shell's keyboard focus policy is <SystemItem Class="Constant">XmEXPLICIT</SystemItem>, unhighlights
the widget and removes the focus
</Para>
</ListItem>
</VarListEntry>
</VariableList>
</RefSect2>
<RefSect2>
<Title>Virtual Bindings</Title>
<Para>The bindings for virtual keys are vendor specific.
For information about bindings for virtual buttons and keys, see &cdeman.VirtualBindings;.
</Para>
</RefSect2>
</RefSect1>
<RefSect1>
<Title>RELATED</Title>
<Para>&cdeman.Core;,
&cdeman.XmDirection;,
&cdeman.XmChangeColor;, and
&cdeman.XmScreen;.
</Para>
</RefSect1>
</RefEntry>
<!--fickle 1.09 7/2/95-->
